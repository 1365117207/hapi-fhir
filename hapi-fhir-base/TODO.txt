
 * Implement JSON parser and encoder- I'm thinking probably just using GSON
   and writing the encode() part from scratch. For the parse() part, the
   ParserState class from the XML parser should be able to be shared with
   the Json parser, which will make it a lot easier to implement..?
 
 * Implement strategy for narrative generation- I'm thinking maybe 
   an interface that turns a given resource into an HTML representation
   and then a default implementation for our basic types (Patient, Observation)
   and maybe a way to configure this in the FhirContext so that the parser
   can take advantage?
 
 * Add SimpleSetters for all primitive datatypes
 
 * Implement and add Simple Getters in a similar way to simple setters
 
 * Add support for modifierExtensions
 
 * Add client and server support for other operations from 
   the list here (we currently support read, vread, and search
   but there are many more): http://latest.fhir.me/http.html 
   
 * Get resource references working on both client and server - for the
   client, maybe allow lazy-loading or something?
   
 * Support compartments for client and server
 
 * Support slices in the model
 
 * Support extensions (declared and undeclared) in primitives, narratives, etc. 
 
 * Create a Maven archetype for a server project and a client project
 
 * Support "Binary" resource, which is a special resource type
 
---------
Issues:
 * Need to be able to bind Identifier.system to a set of allowable values in a profile. Graeme
   has suggested making value[x] repeatable in the profile definition
   
 * CarePlan.Activity has a type of "xmlIdRef" which is a weird datatype. The example here:
   http://www.hl7.org/implement/standards/fhir/careplan-example-integrated.xml.html
   seems to use an extension to model that element instead of the goal type too.
   
 * Would like a standardized (but optional) HTTP parameter for pretty-printing. Suggest: _pretty=true