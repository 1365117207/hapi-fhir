/*
 *  Copyright 2017 Cognitive Medical Systems, Inc (http://www.cognitivemedicine.com).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  @author Jeff Chung
 */
package ca.uhn.fhir.jpa.demo.subscription;

import ca.uhn.fhir.model.dstu2.composite.CodeableConceptDt;
import ca.uhn.fhir.model.dstu2.composite.CodingDt;
import ca.uhn.fhir.model.dstu2.resource.Observation;
import ca.uhn.fhir.model.dstu2.resource.Subscription;
import ca.uhn.fhir.model.dstu2.valueset.ObservationStatusEnum;
import ca.uhn.fhir.model.dstu2.valueset.SubscriptionChannelTypeEnum;
import ca.uhn.fhir.model.dstu2.valueset.SubscriptionStatusEnum;
import ca.uhn.fhir.rest.api.MethodOutcome;
import ca.uhn.fhir.rest.client.IGenericClient;
import ca.uhn.fhir.rest.server.EncodingEnum;
import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;
import org.eclipse.jetty.websocket.client.WebSocketClient;
import org.junit.Ignore;
import org.junit.Test;
import org.slf4j.Logger;

import java.net.URI;

/**
 * Adds a FHIR subscription with criteria through the rest interface. Then creates a websocket with the id of the
 * subscription
 * <p>
 * Note: This test only returns a ping with the subscription id, Check FhirSubscriptionWithSubscriptionIdDstu3IT for
 * a test that returns the xml of the observation
 * <p>
 * To execute the following test, execute it the following way:
 * 0. execute 'clean' test
 * 1. Execute the 'createSubscription' test
 * 2. Update the subscription id in the 'attachWebSocket' test
 * 3. Execute the 'attachWebSocket' test
 * 4. Execute the 'sendObservation' test
 * 5. Look in the 'attachWebSocket' terminal execution and wait for your ping with the subscription id
 */
@Ignore
public class FhirSubscriptionWithSubscriptionIdDstu2IT {

    private static final Logger ourLog = org.slf4j.LoggerFactory.getLogger(FhirSubscriptionWithSubscriptionIdDstu2IT.class);
    private IGenericClient client = FhirServiceUtil.getFhirDstu2Client();

    @Test
    public void clean() {
        RemoveDstu2TestIT.deleteResources(Subscription.class, null, client);
        RemoveDstu2TestIT.deleteResources(Observation.class, null, client);
    }

    @Test
    public void createSubscription() {
        Subscription subscription = new Subscription();
        subscription.setReason("Monitor new neonatal function (note, age will be determined by the monitor)");
        subscription.setStatus(SubscriptionStatusEnum.ACTIVE);
        String criteria = "Observation?code=SNOMED-CT|82313006&_format=xml";
        subscription.setCriteria(criteria);

        Subscription.Channel channel = new Subscription.Channel();
        channel.setType(SubscriptionChannelTypeEnum.WEBSOCKET);
        channel.setPayload("application/json");
        subscription.setChannel(channel);

        MethodOutcome methodOutcome = client.create().resource(subscription).execute();
        String id = methodOutcome.getId().getIdPart();

        System.out.println("Subscription id generated by server is: " + id);
    }

    @Test
    @Ignore
    public void attachWebSocket() throws Exception {
        String subscriptionId = "105002";
        subscriptionId = subscriptionId + "";

        String target = "ws://localhost:9092/websocket/dstu2";

        WebSocketClient webSocketClient = new WebSocketClient();
        SocketImplementation socket = new SocketImplementation(subscriptionId, EncodingEnum.JSON);

        try {
            webSocketClient.start();
            URI echoUri = new URI(target);
            ClientUpgradeRequest request = new ClientUpgradeRequest();
            ourLog.info("Connecting to : {}", echoUri);
            webSocketClient.connect(socket, echoUri, request);

            while (true) {
                Thread.sleep(500L);
            }

        } finally {
            try {
                ourLog.info("Shutting down websocket client");
                webSocketClient.stop();
            } catch (Exception e) {
                ourLog.error("Failure", e);
            }
        }
    }

    @Test
    public void createObservation() throws Exception {
        Observation observation = new Observation();

        observation.setStatus(ObservationStatusEnum.FINAL);
        CodeableConceptDt codeableConcept = new CodeableConceptDt();
        observation.setCode(codeableConcept);
        CodingDt coding = codeableConcept.addCoding();
        coding.setCode("82313006");
        coding.setSystem("SNOMED-CT");

        MethodOutcome methodOutcome2 = client.create().resource(observation).execute();
        String observationId = methodOutcome2.getId().getIdPart();
        observation.setId(observationId);

        System.out.println("Observation id generated by server is: " + observationId);
    }
}