#parse ( "/vm/templates.vm" )

package ${packageBase}.composite;

import java.math.BigDecimal;
import org.apache.commons.lang3.StringUtils;
import java.util.*;
import ca.uhn.fhir.model.api.*;
import ca.uhn.fhir.model.primitive.*;
import ca.uhn.fhir.model.api.annotation.*;

#foreach ( $import in $imports )
import ${import};
#end

/**
 * HAPI/FHIR <b>${className}</b> Datatype
 * (${shortName})
 *
 * <p>
 * <b>Definition:</b>
 * ${definition}
 * </p> 
 *
 * <p>
 * <b>Requirements:</b>
 * ${requirements}
 * </p> 
 */
@DatatypeDef(name="${className}") 
public class ${className}
        extends #{if}(${className}=="ResourceReferenceDt") BaseResourceReference #{else} BaseElement #{end} 
        implements ICompositeDatatype  #{if}( ${className} == "IdentifierDt" || ${className} == "CodingDt" || ${className} == 'QuantityDt'), IQueryParameterType #{end}
{

	/**
	 * Constructor
	 */
	public ${className}() {
		// nothing
	}

#########################
### Type-specific constructors
#########################
#if ( ${className} == "CodeableConceptDt" )
	/**
	 * Constructor which creates a CodeableConceptDt with one coding repetition, containing
	 * the given system and code
	 */
	public CodeableConceptDt(String theSystem, String theCode) {
		addCoding().setSystem(theSystem).setCode(theCode);
	}
#end
#if ( ${className} == "CodingDt" )
	/**
	 * Creates a new Coding with the given system and code
	 */
	public CodingDt(String theSystem, String theCode) {
		setSystem(theSystem);
		setCode(theCode);
	}
#end
#if ( ${className} == "ContactDt" )
	/**
	 * Constructor
	 */
	@SimpleSetter
	public ContactDt(@SimpleSetter.Parameter(name="theValue") String theValue) {
		setValue(theValue);
	}
	
	/**
	 * Constructor
	 */
	@SimpleSetter
	public ContactDt(@SimpleSetter.Parameter(name="theContactUse") ContactUseEnum theContactUse, @SimpleSetter.Parameter(name="theValue") String theValue) {
		setUse(theContactUse);
		setValue(theValue);
	}	
#end
#if ( ${className} == "IdentifierDt" )
	/**
	 * Creates a new identifier with the given system and value
	 */
	@SimpleSetter
	public IdentifierDt(@SimpleSetter.Parameter(name="theSystem") String theSystem, @SimpleSetter.Parameter(name="theValue") String theValue) {
		setSystem(theSystem);
		setValue(theValue);
	}

	/**
	 * Creates a new identifier with the given system and value
	 */
	@SimpleSetter
	public IdentifierDt(@SimpleSetter.Parameter(name="theUse") IdentifierUseEnum theUse, @SimpleSetter.Parameter(name="theSystem") String theSystem, @SimpleSetter.Parameter(name="theValue") String theValue, @SimpleSetter.Parameter(name="theLabel") String theLabel) {
		setUse(theUse);
		setSystem(theSystem);
		setValue(theValue);
		setLabel(theLabel);
	}
	
	@Override
	public String toString() {
		return "IdentifierDt[" + getValueAsQueryToken() + "]";
	}
#end
#if ( ${className} == "QuantityDt" )
	/**
	 * Constructor
	 */
	@SimpleSetter
	public QuantityDt(@SimpleSetter.Parameter(name="theValue") double theValue) {
		setValue(theValue);
	}

	/**
	 * Constructor
	 */
	@SimpleSetter
	public QuantityDt(@SimpleSetter.Parameter(name="theValue") long theValue) {
		setValue(theValue);
	}
	
	/**
	 * Constructor
	 */
	@SimpleSetter
	public QuantityDt(@SimpleSetter.Parameter(name = "theComparator") QuantityCompararatorEnum theComparator, @SimpleSetter.Parameter(name = "theValue") double theValue,
			@SimpleSetter.Parameter(name = "theUnits") String theUnits) {
		setValue(theValue);
		setComparator(theComparator);
		setUnits(theUnits);
	}

	/**
	 * Constructor
	 */
	@SimpleSetter
	public QuantityDt(@SimpleSetter.Parameter(name = "theComparator") QuantityCompararatorEnum theComparator, @SimpleSetter.Parameter(name = "theValue") long theValue,
			@SimpleSetter.Parameter(name = "theUnits") String theUnits) {
		setValue(theValue);
		setComparator(theComparator);
		setUnits(theUnits);
	}

	/**
	 * Constructor
	 */
	@SimpleSetter
	public QuantityDt(@SimpleSetter.Parameter(name="theComparator") QuantityCompararatorEnum theComparator, @SimpleSetter.Parameter(name="theValue") double theValue, @SimpleSetter.Parameter(name="theSystem") String theSystem, @SimpleSetter.Parameter(name="theUnits") String theUnits) {
		setValue(theValue);
		setComparator(theComparator);
		setSystem(theSystem);
		setUnits(theUnits);
	}

	/**
	 * Constructor
	 */
	@SimpleSetter
	public QuantityDt(@SimpleSetter.Parameter(name="theComparator") QuantityCompararatorEnum theComparator, @SimpleSetter.Parameter(name="theValue") long theValue, @SimpleSetter.Parameter(name="theSystem") String theSystem, @SimpleSetter.Parameter(name="theUnits") String theUnits) {
		setValue(theValue);
		setComparator(theComparator);
		setSystem(theSystem);
		setUnits(theUnits);
	}

	@Override
	public void setValueAsQueryToken(String theQualifier, String theValue) {
		setComparator((BoundCodeDt<QuantityCompararatorEnum>) null);
		setCode((CodeDt) null);
		setSystem((UriDt) null);
		setUnits((StringDt) null);
		setValue((DecimalDt) null);

		if (theValue == null) {
			return;
		}
		String[] parts = theValue.split("\\|");
		if (parts.length > 0 && StringUtils.isNotBlank(parts[0])) {
			if (parts[0].startsWith("<=")) {
				setComparator(QuantityCompararatorEnum.LESSTHAN_OR_EQUALS);
				setValue(new BigDecimal(parts[0].substring(2)));
			} else if (parts[0].startsWith("<")) {
				setComparator(QuantityCompararatorEnum.LESSTHAN);
				setValue(new BigDecimal(parts[0].substring(1)));
			} else if (parts[0].startsWith(">=")) {
				setComparator(QuantityCompararatorEnum.GREATERTHAN_OR_EQUALS);
				setValue(new BigDecimal(parts[0].substring(2)));
			} else if (parts[0].startsWith(">")) {
				setComparator(QuantityCompararatorEnum.GREATERTHAN);
				setValue(new BigDecimal(parts[0].substring(1)));
			} else {
				setValue(new BigDecimal(parts[0]));
			}
		}
		if (parts.length > 1 && StringUtils.isNotBlank(parts[1])) {
			setSystem(parts[1]);
		}
		if (parts.length > 2 && StringUtils.isNotBlank(parts[2])) {
			setUnits(parts[2]);
		}

	}

	@Override
	public String getValueAsQueryToken() {
		StringBuilder b= new StringBuilder();
		if (getComparator() != null) {
			b.append(getComparator().getValue());
		}
		if (!getValue().isEmpty()) {
			b.append(getValue().getValueAsString());
		}
		b.append('|');
		if (!getSystem().isEmpty()) {
		b.append(getSystem().getValueAsString());
		}
		b.append('|');
		if (!getUnits().isEmpty()) {
		b.append(getUnits().getValueAsString());
		}
		
		return b.toString();
	}
	

	@Override
	public String getQueryParameterQualifier() {
		return null;
	}	
#end
#if ( ${className} == "ResourceReferenceDt" )
	/**
	 * Constructor which creates a resource reference containing the actual resource in question.
	 * <p>
	 * <b> When using this in a server:</b> Generally if this is serialized, it will be serialized as a contained
	 * resource, so this should not be used if the intent is not to actually supply the referenced resource. This is not
	 * a hard-and-fast rule however, as the server can be configured to not serialized this resource, or to load an ID
	 * and contain even if this constructor is not used.
	 * </p>
	 * 
	 * @param theResource
	 *            The resource instance
	 */
	public ResourceReferenceDt(IResource theResource) {
		super(theResource);
	}

	/**
	 * Constructor which accepts a reference directly (this can be an ID, a partial/relative URL or a complete/absolute
	 * URL)
	 * 
	 * @param theId
	 *            The reference itself
	 */
	public ResourceReferenceDt(String theId) {
		setReference(new IdDt(theId));
	}

	/**
	 * Constructor which accepts a reference directly (this can be an ID, a partial/relative URL or a complete/absolute
	 * URL)
	 * 
	 * @param theId
	 *            The reference itself
	 */
	public ResourceReferenceDt(IdDt theResourceId) {
		setReference(theResourceId);
	}
#end

#childExtensionFields( $childExtensionTypes )
#childVars( $children )
#childAccessors( $children )
#childResourceBlocks($resourceBlockChildren)

#########################
### Type-specific methods
#########################
#if ( ${className} == "CodingDt" )
	/**
	 * Returns true if <code>this</code> Coding has the same {@link CodingDt#[[#]]#getCode() Code}
	 * and {@link CodingDt#[[#]]#getSystem() system} (as compared by simple equals comparison).
	 * Does not compare other Codes (e.g. {@link CodingDt#[[#]]#getUse() use}) or any extensions. 
	 */
	public boolean matchesSystemAndCode(CodingDt theCoding) {
		if (theCoding == null) {
			return false;
		}
		return getCode().equals(theCoding.getCode()) && getSystem().equals(theCoding.getSystem());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String getValueAsQueryToken() {
		if (org.apache.commons.lang3.StringUtils.isNotBlank(getSystem().getValueAsString())) {
			return getSystem().getValueAsString() + '|' + getCode().getValueAsString(); 
		} else {
			return getCode().getValueAsString();
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void setValueAsQueryToken(String theQualifier, String theParameter) {
		int barIndex = theParameter.indexOf('|');
		if (barIndex != -1) {
			setSystem(new UriDt(theParameter.substring(0, barIndex)));
			setCode(theParameter.substring(barIndex + 1));
		} else {
			setCode(theParameter);
		}
	}	

	@Override
	public String getQueryParameterQualifier() {
		return null;
	}	
#end
#if ( ${className} == "HumanNameDt" )
	/**
	 * Returns all repetitions of {@link ${hash}getFamily() family name} as a space separated string
	 * 
	 * @see DatatypeUtil${hash}joinStringsSpaceSeparated(List)
	 */
	public String getFamilyAsSingleString() {
		return ca.uhn.fhir.util.DatatypeUtil.joinStringsSpaceSeparated(getFamily());
	}

	/**
	 * Returns all repetitions of {@link ${hash}getGiven() given name} as a space separated string
	 * 
	 * @see DatatypeUtil${hash}joinStringsSpaceSeparated(List)
	 */
	public String getGivenAsSingleString() {
		return ca.uhn.fhir.util.DatatypeUtil.joinStringsSpaceSeparated(getGiven());
	}

	/**
	 * Returns all repetitions of {@link ${hash}getPrefix() prefix name} as a space separated string
	 * 
	 * @see DatatypeUtil${hash}joinStringsSpaceSeparated(List)
	 */
	public String getPrefixAsSingleString() {
		return ca.uhn.fhir.util.DatatypeUtil.joinStringsSpaceSeparated(getPrefix());
	}

	/**
	 * Returns all repetitions of {@link ${hash}Suffix() suffix} as a space separated string
	 * 
	 * @see DatatypeUtil${hash}joinStringsSpaceSeparated(List)
	 */
	public String getSuffixAsSingleString() {
		return ca.uhn.fhir.util.DatatypeUtil.joinStringsSpaceSeparated(getSuffix());
	}
#end
#if ( ${className} == "IdentifierDt" )
	/**
	 * Returns true if <code>this</code> identifier has the same {@link IdentifierDt#[[#]]#getValue() value}
	 * and {@link IdentifierDt#[[#]]#getSystem() system} (as compared by simple equals comparison).
	 * Does not compare other values (e.g. {@link IdentifierDt#[[#]]#getUse() use}) or any extensions. 
	 */
	public boolean matchesSystemAndValue(IdentifierDt theIdentifier) {
		if (theIdentifier == null) {
			return false;
		}
		return getValue().equals(theIdentifier.getValue()) && getSystem().equals(theIdentifier.getSystem());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String getValueAsQueryToken() {
		if (org.apache.commons.lang3.StringUtils.isNotBlank(getSystem().getValueAsString())) {
			return getSystem().getValueAsString() + '|' + getValue().getValueAsString(); 
		} else {
			return getValue().getValueAsString();
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void setValueAsQueryToken(String theQualifier, String theParameter) {
		int barIndex = theParameter.indexOf('|');
		if (barIndex != -1) {
			setSystem(new UriDt(theParameter.substring(0, barIndex)));
			setValue(theParameter.substring(barIndex + 1));
		} else {
			setValue(theParameter);
		}
	}	

	@Override
	public String getQueryParameterQualifier() {
		return null;
	}	
#end
#childExtensionTypes( $childExtensionTypes )

}