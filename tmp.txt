diff --git a/hapi-fhir-base/src/main/java/ca/uhn/fhir/parser/BaseParser.java b/hapi-fhir-base/src/main/java/ca/uhn/fhir/parser/BaseParser.java
index 43697b7..53c9938 100644
--- a/hapi-fhir-base/src/main/java/ca/uhn/fhir/parser/BaseParser.java
+++ b/hapi-fhir-base/src/main/java/ca/uhn/fhir/parser/BaseParser.java
@@ -328,7 +328,19 @@ public abstract class BaseParser implements IParser {
 								versionIdPart = ResourceMetadataKeyEnum.VERSION.get((IResource) res);
 							}
 
-							res.setId(new IdDt(baseType.getValueAsString(), resDef.getName(), res.getIdElement().getIdPart(), versionIdPart));
+							String baseUrl = baseType.getValueAsString();
+							String idPart = res.getIdElement().getIdPart();
+							
+							String resourceName = resDef.getName();
+							if (!baseUrl.startsWith("cid:") && !baseUrl.startsWith("urn:")) {
+								res.setId(new IdDt(baseUrl, resourceName, idPart, versionIdPart));
+							} else {
+								if (baseUrl.endsWith(":")) {
+									res.setId(new IdDt(baseUrl + idPart));
+								} else {
+									res.setId(new IdDt(baseUrl + ':' + idPart));
+								}
+							}
 						}
 
 					}
diff --git a/hapi-fhir-base/src/main/java/ca/uhn/fhir/parser/ParserState.java b/hapi-fhir-base/src/main/java/ca/uhn/fhir/parser/ParserState.java
index 1c60ad1..c801ff4 100644
--- a/hapi-fhir-base/src/main/java/ca/uhn/fhir/parser/ParserState.java
+++ b/hapi-fhir-base/src/main/java/ca/uhn/fhir/parser/ParserState.java
@@ -1059,8 +1059,6 @@ class ParserState<T> {
 			} else {
 				throw new DataFormatException("Unexpected element in entry: " + theLocalPart);
 			}
-
-			// TODO: handle category
 		}
 
 		protected BundleEntry getEntry() {
@@ -1317,10 +1315,20 @@ class ParserState<T> {
 				String resourceName = myContext.getResourceDefinition(nextResource).getName();
 				String bundleIdPart = nextResource.getId().getIdPart();
 				if (isNotBlank(bundleIdPart)) {
+					String baseUrl;
 					if (isNotBlank(entryBaseUrl)) {
-						nextResource.setId(new IdDt(entryBaseUrl, resourceName, bundleIdPart, version));
+						baseUrl = entryBaseUrl;
+					} else {
+						baseUrl = bundleBaseUrl;
+					}
+					if (!baseUrl.startsWith("cid:") && !baseUrl.startsWith("urn:")) {
+						nextResource.setId(new IdDt(baseUrl, resourceName, bundleIdPart, version));
 					} else {
-						nextResource.setId(new IdDt(bundleBaseUrl, resourceName, bundleIdPart, version));
+						if (baseUrl.endsWith(":")) {
+							nextResource.setId(new IdDt(baseUrl + bundleIdPart));
+						} else {
+							nextResource.setId(new IdDt(baseUrl + ':' + bundleIdPart));
+						}
 					}
 				}
 			}
@@ -1535,9 +1543,9 @@ class ParserState<T> {
 			try {
 				child = myDefinition.getChildByNameOrThrowDataFormatException(theChildName);
 			} catch (DataFormatException e) {
-				/* This means we've found an element that doesn't exist on the structure.
-				 * If the error handler doesn't throw an exception, swallow the element silently along
-				 * with any child elements
+				/*
+				 * This means we've found an element that doesn't exist on the structure. If the error handler doesn't
+				 * throw an exception, swallow the element silently along with any child elements
 				 */
 				myErrorHandler.unknownElement(null, theChildName);
 				push(new SwallowChildrenWholeState(getPreResourceState()));
@@ -2093,7 +2101,7 @@ class ParserState<T> {
 								}
 							}
 						}
-					}else					if (theElement instanceof IBaseReference) {
+					} else if (theElement instanceof IBaseReference) {
 						IBaseReference nextRef = (IBaseReference) theElement;
 						String ref = nextRef.getReferenceElement().getValue();
 						if (isNotBlank(ref)) {
@@ -2589,7 +2597,7 @@ class ParserState<T> {
 
 		@Override
 		public void enteringNewElement(String theNamespaceURI, String theLocalPart) throws DataFormatException {
-			// IGNORE - don't handle this as an error, we process these as XML events  
+			// IGNORE - don't handle this as an error, we process these as XML events
 		}
 
 		@Override
@@ -2598,7 +2606,7 @@ class ParserState<T> {
 				myDt.setValueAsString(theValue);
 				return;
 			} else {
-				// IGNORE - don't handle this as an error, we process these as XML events  
+				// IGNORE - don't handle this as an error, we process these as XML events
 			}
 		}
 
diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu1.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu1.java
index 4a8b5c2..77c29af 100644
--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu1.java
+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu1.java
@@ -210,9 +210,10 @@ public class FhirSystemDaoDstu1 extends BaseFhirSystemDao<List<IResource>> {
 					ourLog.info("Transaction resource ID[{}] is being updated", newId);
 				} else {
 					if (!nextId.getIdPart().startsWith("#")) {
-						nextId = new IdDt(resourceName + '/' + nextId.getIdPart());
+						nextId = new IdDt(resourceName, nextId.getIdPart());
 						ourLog.info("Transaction resource ID[{}] has been assigned new ID[{}]", nextId, newId);
 						idConversions.put(nextId, newId);
+						idConversions.put(new IdDt(nextId.getIdPart()), newId);
 					}
 				}
 			}
diff --git a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu2.java b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu2.java
index 5e5350c..40f7859 100644
--- a/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu2.java
+++ b/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu2.java
@@ -25,6 +25,7 @@ import static org.apache.commons.lang3.StringUtils.*;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -45,6 +46,7 @@ import ca.uhn.fhir.model.dstu2.resource.Bundle;
 import ca.uhn.fhir.model.dstu2.resource.Bundle.Entry;
 import ca.uhn.fhir.model.dstu2.resource.Bundle.EntryTransactionResponse;
 import ca.uhn.fhir.model.dstu2.resource.OperationOutcome;
+import ca.uhn.fhir.model.dstu2.valueset.BundleTypeEnum;
 import ca.uhn.fhir.model.dstu2.valueset.HTTPVerbEnum;
 import ca.uhn.fhir.model.dstu2.valueset.IssueSeverityEnum;
 import ca.uhn.fhir.model.primitive.IdDt;
@@ -134,7 +136,7 @@ public class FhirSystemDaoDstu2 extends BaseFhirSystemDao<Bundle> {
 		ourLog.info("Beginning transaction with {} resources", theResources.getEntry().size());
 		long start = System.currentTimeMillis();
 
-		Set<IdDt> allIds = new HashSet<IdDt>();
+		Set<IdDt> allIds = new LinkedHashSet<IdDt>();
 		Map<IdDt, IdDt> idSubstitutions = new HashMap<IdDt, IdDt>();
 		Map<IdDt, DaoMethodOutcome> idToPersistedOutcome = new HashMap<IdDt, DaoMethodOutcome>();
 
@@ -172,257 +174,97 @@ public class FhirSystemDaoDstu2 extends BaseFhirSystemDao<Bundle> {
 			}
 
 			switch (verb) {
-				case POST: {
-					// CREATE
-					@SuppressWarnings("rawtypes")
-					IFhirResourceDao resourceDao = getDao(res.getClass());
-					res.setId((String)null);
-					DaoMethodOutcome outcome;
-					Entry newEntry = response.addEntry();
-					outcome = resourceDao.create(res, nextEntry.getTransaction().getIfNoneExist(), false);
-					handleTransactionCreateOrUpdateOutcome(idSubstitutions, idToPersistedOutcome, nextResourceId, outcome, newEntry);
-					break;
+			case POST: {
+				// CREATE
+				@SuppressWarnings("rawtypes")
+				IFhirResourceDao resourceDao = getDao(res.getClass());
+				res.setId((String) null);
+				DaoMethodOutcome outcome;
+				Entry newEntry = response.addEntry();
+				outcome = resourceDao.create(res, nextEntry.getTransaction().getIfNoneExist(), false);
+				handleTransactionCreateOrUpdateOutcome(idSubstitutions, idToPersistedOutcome, nextResourceId, outcome, newEntry);
+				break;
+			}
+			case DELETE: {
+				// DELETE
+				Entry newEntry = response.addEntry();
+				String url = extractTransactionUrlOrThrowException(nextEntry, verb);
+				UrlParts parts = parseUrl(verb.getCode(), url);
+				if (parts.getResourceId() != null) {
+					parts.getDao().delete(new IdDt(parts.getResourceType(), parts.getResourceId()));
+				} else {
+					parts.getDao().deleteByUrl(parts.getResourceType() + '?' + parts.getParams());
 				}
-				case DELETE: {
-					// DELETE
-					Entry newEntry = response.addEntry();
-					String url = extractTransactionUrlOrThrowException(nextEntry, verb);
-					UrlParts parts = parseUrl(verb.getCode(), url);
-					if (parts.getResourceId() != null) {
-						parts.getDao().delete(new IdDt(parts.getResourceType(), parts.getResourceId()));
-					} else {
-						parts.getDao().deleteByUrl(parts.getResourceType() + '?' + parts.getParams());
-					}
 
-					newEntry.getTransactionResponse().setStatus(Integer.toString(Constants.STATUS_HTTP_204_NO_CONTENT));
-					break;
+				newEntry.getTransactionResponse().setStatus(Integer.toString(Constants.STATUS_HTTP_204_NO_CONTENT));
+				break;
+			}
+			case PUT: {
+				// UPDATE
+				@SuppressWarnings("rawtypes")
+				IFhirResourceDao resourceDao = getDao(res.getClass());
+
+				DaoMethodOutcome outcome;
+				Entry newEntry = response.addEntry();
+
+				String url = extractTransactionUrlOrThrowException(nextEntry, verb);
+
+				UrlParts parts = parseUrl(verb.getCode(), url);
+				if (isNotBlank(parts.getResourceId())) {
+					res.setId(new IdDt(parts.getResourceType(), parts.getResourceId()));
+					outcome = resourceDao.update(res, null, false);
+				} else {
+					res.setId((String) null);
+					outcome = resourceDao.update(res, parts.getResourceType() + '?' + parts.getParams(), false);
 				}
-				case PUT: {
-					// UPDATE
-					@SuppressWarnings("rawtypes")
-					IFhirResourceDao resourceDao = getDao(res.getClass());
-
-					DaoMethodOutcome outcome;
-					Entry newEntry = response.addEntry();
-
-					String url = extractTransactionUrlOrThrowException(nextEntry, verb);
-
-					UrlParts parts = parseUrl(verb.getCode(), url);
-//					if (res.getId().hasIdPart() && isBlank(parts.getResourceId())) {
-//						parts.setResourceId(res.getId().getIdPart());
-//					}
-					if (isNotBlank(parts.getResourceId())) {
-						res.setId(new IdDt(parts.getResourceType(), parts.getResourceId()));
-						outcome = resourceDao.update(res, null, false);
+
+				handleTransactionCreateOrUpdateOutcome(idSubstitutions, idToPersistedOutcome, nextResourceId, outcome, newEntry);
+				break;
+			}
+			case GET: {
+				// SEARCH/READ/VREAD
+				String url = extractTransactionUrlOrThrowException(nextEntry, verb);
+				UrlParts parts = parseUrl(verb.getCode(), url);
+
+				@SuppressWarnings("rawtypes")
+				IFhirResourceDao resourceDao = parts.getDao();
+
+				if (parts.getResourceId() != null && parts.getParams() == null) {
+					IResource found;
+					if (parts.getVersionId() != null) {
+						found = resourceDao.read(new IdDt(parts.getResourceType(), parts.getResourceId(), parts.getVersionId()));
 					} else {
-						res.setId((String)null);
-						outcome = resourceDao.update(res, parts.getResourceType() + '?' + parts.getParams(), false);
+						found = resourceDao.read(new IdDt(parts.getResourceType(), parts.getResourceId()));
 					}
-
-					handleTransactionCreateOrUpdateOutcome(idSubstitutions, idToPersistedOutcome, nextResourceId, outcome, newEntry);
-					break;
-				}
-				case GET: {
-					// SEARCH/READ/VREAD
-					String url = extractTransactionUrlOrThrowException(nextEntry, verb);
-					UrlParts parts = parseUrl(verb.getCode(), url);
-
-					@SuppressWarnings("rawtypes")
-					IFhirResourceDao resourceDao = parts.getDao();
-
-					if (parts.getResourceId() != null && parts.getParams() == null) {
-						IResource found;
-						if (parts.getVersionId() != null) {
-							found = resourceDao.read(new IdDt(parts.getResourceType(), parts.getResourceId(), parts.getVersionId()));
-						} else {
-							found = resourceDao.read(new IdDt(parts.getResourceType(), parts.getResourceId()));
-						}
-						EntryTransactionResponse resp = response.addEntry().setResource(found).getTransactionResponse();
-						resp.setLocation(found.getId().toUnqualified().getValue());
-						resp.setEtag(found.getId().getVersionIdPart());
-					} else if (parts.getParams() != null) {
-						RuntimeResourceDefinition def = getContext().getResourceDefinition(parts.getDao().getResourceType());
-						SearchParameterMap params = translateMatchUrl(url, def);
-						IBundleProvider bundle = parts.getDao().search(params);
-
-						Bundle searchBundle = new Bundle();
-						searchBundle.setTotal(bundle.size());
-
-						int configuredMax = 100; // this should probably be configurable or something
-						if (bundle.size() > configuredMax) {
-							oo.addIssue().setSeverity(IssueSeverityEnum.WARNING).setDetails("Search nested within transaction found more than " + configuredMax + " matches, but paging is not supported in nested transactions");
-						}
-						List<IBaseResource> resourcesToAdd = bundle.getResources(0, Math.min(bundle.size(), configuredMax));
-						for (IBaseResource next : resourcesToAdd) {
-							searchBundle.addEntry().setResource((IResource) next);
-						}
-
-						response.addEntry().setResource(searchBundle);
+					EntryTransactionResponse resp = response.addEntry().setResource(found).getTransactionResponse();
+					resp.setLocation(found.getId().toUnqualified().getValue());
+					resp.setEtag(found.getId().getVersionIdPart());
+				} else if (parts.getParams() != null) {
+					RuntimeResourceDefinition def = getContext().getResourceDefinition(parts.getDao().getResourceType());
+					SearchParameterMap params = translateMatchUrl(url, def);
+					IBundleProvider bundle = parts.getDao().search(params);
+
+					Bundle searchBundle = new Bundle();
+					searchBundle.setTotal(bundle.size());
+
+					int configuredMax = 100; // this should probably be configurable or something
+					if (bundle.size() > configuredMax) {
+						oo.addIssue().setSeverity(IssueSeverityEnum.WARNING).setDetails("Search nested within transaction found more than " + configuredMax + " matches, but paging is not supported in nested transactions");
 					}
+					List<IBaseResource> resourcesToAdd = bundle.getResources(0, Math.min(bundle.size(), configuredMax));
+					for (IBaseResource next : resourcesToAdd) {
+						searchBundle.addEntry().setResource((IResource) next);
+					}
+
+					response.addEntry().setResource(searchBundle);
 				}
 			}
+			}
 
 		}
 
 		FhirTerser terser = getContext().newTerser();
 
-		// int creations = 0;
-		// int updates = 0;
-		//
-		// Map<IdDt, IdDt> idConversions = new HashMap<IdDt, IdDt>();
-		//
-		// List<ResourceTable> persistedResources = new ArrayList<ResourceTable>();
-		//
-		// List<IResource> retVal = new ArrayList<IResource>();
-		// OperationOutcome oo = new OperationOutcome();
-		// retVal.add(oo);
-		//
-		// for (int resourceIdx = 0; resourceIdx < theResources.size(); resourceIdx++) {
-		// IResource nextResource = theResources.get(resourceIdx);
-		//
-		// IdDt nextId = nextResource.getId();
-		// if (nextId == null) {
-		// nextId = new IdDt();
-		// }
-		//
-		// String resourceName = toResourceName(nextResource);
-		// BundleEntryTransactionOperationEnum nextResouceOperationIn =
-		// ResourceMetadataKeyEnum.ENTRY_TRANSACTION_OPERATION.get(nextResource);
-		// if (nextResouceOperationIn == null && hasValue(ResourceMetadataKeyEnum.DELETED_AT.get(nextResource))) {
-		// nextResouceOperationIn = BundleEntryTransactionOperationEnum.DELETE;
-		// }
-		//
-		// String matchUrl = ResourceMetadataKeyEnum.LINK_SEARCH.get(nextResource);
-		// Set<Long> candidateMatches = null;
-		// if (StringUtils.isNotBlank(matchUrl)) {
-		// candidateMatches = processMatchUrl(matchUrl, nextResource.getClass());
-		// }
-		//
-		// ResourceTable entity;
-		// if (nextResouceOperationIn == BundleEntryTransactionOperationEnum.CREATE) {
-		// entity = null;
-		// } else if (nextResouceOperationIn == BundleEntryTransactionOperationEnum.UPDATE || nextResouceOperationIn ==
-		// BundleEntryTransactionOperationEnum.DELETE) {
-		// if (candidateMatches == null || candidateMatches.size() == 0) {
-		// if (nextId == null || StringUtils.isBlank(nextId.getIdPart())) {
-		// throw new InvalidRequestException(getContext().getLocalizer().getMessage(FhirSystemDaoDstu2.class,
-		// "transactionOperationFailedNoId", nextResouceOperationIn.name()));
-		// }
-		// entity = tryToLoadEntity(nextId);
-		// if (entity == null) {
-		// if (nextResouceOperationIn == BundleEntryTransactionOperationEnum.UPDATE) {
-		// ourLog.debug("Attempting to UPDATE resource with unknown ID '{}', will CREATE instead", nextId);
-		// } else if (candidateMatches == null) {
-		// throw new InvalidRequestException(getContext().getLocalizer().getMessage(FhirSystemDaoDstu2.class,
-		// "transactionOperationFailedUnknownId", nextResouceOperationIn.name(), nextId));
-		// } else {
-		// ourLog.debug("Resource with match URL [{}] already exists, will be NOOP", matchUrl);
-		// ResourceMetadataKeyEnum.ENTRY_TRANSACTION_OPERATION.put(nextResource,
-		// BundleEntryTransactionOperationEnum.NOOP);
-		// persistedResources.add(null);
-		// retVal.add(nextResource);
-		// continue;
-		// }
-		// }
-		// } else if (candidateMatches.size() == 1) {
-		// entity = loadFirstEntityFromCandidateMatches(candidateMatches);
-		// } else {
-		// throw new InvalidRequestException(getContext().getLocalizer().getMessage(FhirSystemDaoDstu2.class,
-		// "transactionOperationWithMultipleMatchFailure", nextResouceOperationIn.name(), matchUrl,
-		// candidateMatches.size()));
-		// }
-		// } else if (nextResouceOperationIn == BundleEntryTransactionOperationEnum.NOOP) {
-		// throw new InvalidRequestException(getContext().getLocalizer().getMessage(FhirSystemDaoDstu2.class,
-		// "incomingNoopInTransaction"));
-		// } else if (nextId.isEmpty()) {
-		// entity = null;
-		// } else {
-		// entity = tryToLoadEntity(nextId);
-		// }
-		//
-		// BundleEntryTransactionOperationEnum nextResouceOperationOut;
-		// if (entity == null) {
-		// nextResouceOperationOut = BundleEntryTransactionOperationEnum.CREATE;
-		// entity = toEntity(nextResource);
-		// if (nextId.isEmpty() == false && nextId.getIdPart().startsWith("cid:")) {
-		// ourLog.debug("Resource in transaction has ID[{}], will replace with server assigned ID", nextId.getIdPart());
-		// } else if (nextResouceOperationIn == BundleEntryTransactionOperationEnum.CREATE) {
-		// if (nextId.isEmpty() == false) {
-		// ourLog.debug("Resource in transaction has ID[{}] but is marked for CREATE, will ignore ID",
-		// nextId.getIdPart());
-		// }
-		// if (candidateMatches != null) {
-		// if (candidateMatches.size() == 1) {
-		// ourLog.debug("Resource with match URL [{}] already exists, will be NOOP", matchUrl);
-		// BaseHasResource existingEntity = loadFirstEntityFromCandidateMatches(candidateMatches);
-		// IResource existing = (IResource) toResource(existingEntity);
-		// ResourceMetadataKeyEnum.ENTRY_TRANSACTION_OPERATION.put(existing, BundleEntryTransactionOperationEnum.NOOP);
-		// persistedResources.add(null);
-		// retVal.add(existing);
-		// continue;
-		// }
-		// if (candidateMatches.size() > 1) {
-		// throw new InvalidRequestException(getContext().getLocalizer().getMessage(FhirSystemDaoDstu2.class,
-		// "transactionOperationWithMultipleMatchFailure", BundleEntryTransactionOperationEnum.CREATE.name(), matchUrl,
-		// candidateMatches.size()));
-		// }
-		// }
-		// } else {
-		// createForcedIdIfNeeded(entity, nextId);
-		// }
-		// myEntityManager.persist(entity);
-		// if (entity.getForcedId() != null) {
-		// myEntityManager.persist(entity.getForcedId());
-		// }
-		// creations++;
-		// ourLog.info("Resource Type[{}] with ID[{}] does not exist, creating it", resourceName, nextId);
-		// } else {
-		// nextResouceOperationOut = nextResouceOperationIn;
-		// if (nextResouceOperationOut == null) {
-		// nextResouceOperationOut = BundleEntryTransactionOperationEnum.UPDATE;
-		// }
-		// updates++;
-		// ourLog.info("Resource Type[{}] with ID[{}] exists, updating it", resourceName, nextId);
-		// }
-		//
-		// persistedResources.add(entity);
-		// retVal.add(nextResource);
-		// ResourceMetadataKeyEnum.ENTRY_TRANSACTION_OPERATION.put(nextResource, nextResouceOperationOut);
-		// }
-		//
-		// ourLog.info("Flushing transaction to database");
-		// myEntityManager.flush();
-		//
-		// for (int i = 0; i < persistedResources.size(); i++) {
-		// ResourceTable entity = persistedResources.get(i);
-		//
-		// String resourceName = toResourceName(theResources.get(i));
-		// IdDt nextId = theResources.get(i).getId();
-		//
-		// IdDt newId;
-		//
-		// if (entity == null) {
-		// newId = retVal.get(i + 1).getId().toUnqualifiedVersionless();
-		// } else {
-		// newId = entity.getIdDt().toUnqualifiedVersionless();
-		// }
-		//
-		// if (nextId == null || nextId.isEmpty()) {
-		// ourLog.info("Transaction resource (with no preexisting ID) has been assigned new ID[{}]", nextId, newId);
-		// } else {
-		// if (nextId.toUnqualifiedVersionless().equals(newId)) {
-		// ourLog.info("Transaction resource ID[{}] is being updated", newId);
-		// } else {
-		// if (!nextId.getIdPart().startsWith("#")) {
-		// nextId = new IdDt(resourceName + '/' + nextId.getIdPart());
-		// ourLog.info("Transaction resource ID[{}] has been assigned new ID[{}]", nextId, newId);
-		// idConversions.put(nextId, newId);
-		// }
-		// }
-		// }
-		//
-		// }
-		//
 		for (DaoMethodOutcome nextOutcome : idToPersistedOutcome.values()) {
 			IResource nextResource = nextOutcome.getResource();
 			if (nextResource == null) {
@@ -445,49 +287,41 @@ public class FhirSystemDaoDstu2 extends BaseFhirSystemDao<Bundle> {
 			Date deletedTimestampOrNull = deletedInstantOrNull != null ? deletedInstantOrNull.getValue() : null;
 			updateEntity(nextResource, nextOutcome.getEntity(), false, deletedTimestampOrNull, true, false);
 		}
-		//
-		// ourLog.info("Re-flushing updated resource references and extracting search criteria");
-		//
-		// for (int i = 0; i < theResources.size(); i++) {
-		// IResource resource = theResources.get(i);
-		// ResourceTable table = persistedResources.get(i);
-		// if (table == null) {
-		// continue;
-		// }
-		//
-		// InstantDt deletedInstantOrNull = ResourceMetadataKeyEnum.DELETED_AT.get(resource);
-		// Date deletedTimestampOrNull = deletedInstantOrNull != null ? deletedInstantOrNull.getValue() : null;
-		// if (deletedInstantOrNull == null && ResourceMetadataKeyEnum.ENTRY_TRANSACTION_OPERATION.get(resource) ==
-		// BundleEntryTransactionOperationEnum.DELETE) {
-		// deletedTimestampOrNull = new Date();
-		// ResourceMetadataKeyEnum.DELETED_AT.put(resource, new InstantDt(deletedTimestampOrNull));
-		// }
-		//
-		// updateEntity(resource, table, table.getId() != null, deletedTimestampOrNull);
-		// }
 
 		long delay = System.currentTimeMillis() - start;
-		ourLog.info("Transaction completed in {}ms", new Object[]{delay});
+		ourLog.info("Transaction completed in {}ms", new Object[] { delay });
 
 		oo.addIssue().setSeverity(IssueSeverityEnum.INFORMATION).setDetails("Transaction completed in " + delay + "ms");
 
+		for (IdDt next : allIds) {
+			IdDt replacement = idSubstitutions.get(next);
+			if (replacement == null) {
+				continue;
+			}
+			if (replacement.equals(next)) {
+				continue;
+			}
+			oo.addIssue().setSeverity(IssueSeverityEnum.INFORMATION).setDetails("Placeholder resource ID \"" + next + "\" was replaced with permanent ID \"" + replacement + "\"");
+		}
+
 		notifyWriteCompleted();
 
+		response.setType(BundleTypeEnum.TRANSACTION_RESPONSE);
 		return response;
 	}
 
 	@Override
 	public MetaDt metaGetOperation() {
-		
+
 		String sql = "SELECT d FROM TagDefinition d WHERE d.myId IN (SELECT DISTINCT t.myTagId FROM ResourceTag t)";
 		TypedQuery<TagDefinition> q = myEntityManager.createQuery(sql, TagDefinition.class);
 		List<TagDefinition> tagDefinitions = q.getResultList();
 
 		MetaDt retVal = super.toMetaDt(tagDefinitions);
-		
+
 		return retVal;
 	}
-	
+
 	private String extractTransactionUrlOrThrowException(Entry nextEntry, HTTPVerbEnum verb) {
 		String url = nextEntry.getTransaction().getUrl();
 		if (isBlank(url)) {
@@ -500,7 +334,12 @@ public class FhirSystemDaoDstu2 extends BaseFhirSystemDao<Bundle> {
 		IdDt newId = outcome.getId().toUnqualifiedVersionless();
 		IdDt resourceId = nextResourceId.toUnqualifiedVersionless();
 		if (newId.equals(resourceId) == false) {
+			/*
+			 * The correct way for substitution IDs to be is to be with no resource type, but we'll accept the qualified
+			 * kind too just to be lenient.
+			 */
 			idSubstitutions.put(resourceId, newId);
+			idSubstitutions.put(resourceId.withResourceType(null), newId);
 		}
 		idToPersistedOutcome.put(newId, outcome);
 		if (outcome.getCreated().booleanValue()) {
diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu1Test.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu1Test.java
index ed03eaa..3df69ad 100644
--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu1Test.java
+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu1Test.java
@@ -262,6 +262,7 @@ public class FhirSystemDaoDstu1Test {
 		/*
 		 * Add a tag
 		 */
+<<<<<<< HEAD
 		ourObservationDao.addTag(o1id2, TagTypeEnum.TAG, "testGetAllTagsScheme3", "testGetAllTagsTerm3", "testGetAllTagsLabel3");
 		tags2 = ourObservationDao.getTags(o1id2);
 		assertNull(tags2.getTag("testGetAllTagsScheme1", "testGetAllTagsTerm1"));
@@ -358,6 +359,125 @@ public class FhirSystemDaoDstu1Test {
 
 	@Test
 	public void testTransactionWithDelete() throws Exception {
+=======
+        ourObservationDao.addTag(o1id2, TagTypeEnum.TAG, "testGetAllTagsScheme3", "testGetAllTagsTerm3", "testGetAllTagsLabel3");
+        tags2 = ourObservationDao.getTags(o1id2);
+        assertNull(tags2.getTag("testGetAllTagsScheme1", "testGetAllTagsTerm1"));
+        assertNull(tags2.getTag("testGetAllTagsScheme2", "testGetAllTagsTerm2"));
+        assertNotNull(tags2.getTag("testGetAllTagsScheme3", "testGetAllTagsTerm3"));
+        assertEquals("testGetAllTagsLabel3", tags2.getTag("testGetAllTagsScheme3", "testGetAllTagsTerm3").getLabel());
+
+        tags2 = ourObservationDao.getTags(o1id);
+        assertNull(tags2.getTag("testGetAllTagsScheme1", "testGetAllTagsTerm1"));
+        assertNotNull(tags2.getTag("testGetAllTagsScheme2", "testGetAllTagsTerm2"));
+
+    }
+
+
+    @Test(expected = InvalidRequestException.class)
+    public void testTransactionFailsWithDuplicateIds() {
+        Patient patient1 = new Patient();
+        patient1.setId(new IdDt("Patient/testTransactionFailsWithDusplicateIds"));
+        patient1.addIdentifier().setSystem("urn:system").setValue("testPersistWithSimpleLinkP01");
+
+        Patient patient2 = new Patient();
+        patient2.setId(new IdDt("Patient/testTransactionFailsWithDusplicateIds"));
+        patient2.addIdentifier().setSystem("urn:system").setValue("testPersistWithSimpleLinkP02");
+
+        ourSystemDao.transaction(Arrays.asList((IResource) patient1, patient2));
+    }
+
+    @Test
+    public void testTransactionFromBundle() throws Exception {
+
+        InputStream bundleRes = FhirSystemDaoDstu1Test.class.getResourceAsStream("/bundle-dstu1.xml");
+        Bundle bundle = ourFhirContext.newXmlParser().parseBundle(new InputStreamReader(bundleRes));
+        List<IResource> res = bundle.toListOfResources();
+
+        ourSystemDao.transaction(res);
+
+        Patient p1 = (Patient) res.get(0);
+        String id = p1.getId().getValue();
+        ourLog.info("ID: {}", id);
+        assertThat(id, not(equalToIgnoringCase("74635")));
+        assertThat(id, not(equalToIgnoringCase("")));
+    }
+
+
+    /**
+     * Issue #55. Note that this is the incorrect way to 
+     * do this but we'll leave it since people may depend on it.
+     */
+    @Test
+    public void testTransactionWithCidIds() throws Exception {
+        List<IResource> res = new ArrayList<IResource>();
+
+        Patient p1 = new Patient();
+        p1.setId("cid:patient1");
+        p1.addIdentifier().setSystem("system").setValue("testTransactionWithCidIds01");
+        res.add(p1);
+
+        Observation o1 = new Observation();
+        o1.setId("cid:observation1");
+        o1.getIdentifier().setSystem("system").setValue("testTransactionWithCidIds02");
+        o1.setSubject(new ResourceReferenceDt("Patient/cid:patient1"));
+        res.add(o1);
+
+        Observation o2 = new Observation();
+        o2.setId("cid:observation2");
+        o2.getIdentifier().setSystem("system").setValue("testTransactionWithCidIds03");
+        o2.setSubject(new ResourceReferenceDt("Patient/cid:patient1"));
+        res.add(o2);
+
+        ourSystemDao.transaction(res);
+
+        assertTrue(p1.getId().getValue(), p1.getId().getIdPart().matches("^[0-9]+$"));
+        assertTrue(o1.getId().getValue(), o1.getId().getIdPart().matches("^[0-9]+$"));
+        assertTrue(o2.getId().getValue(), o2.getId().getIdPart().matches("^[0-9]+$"));
+
+        assertThat(o1.getSubject().getReference().getValue(), endsWith("Patient/" + p1.getId().getIdPart()));
+        assertThat(o2.getSubject().getReference().getValue(), endsWith("Patient/" + p1.getId().getIdPart()));
+
+    }
+
+    /**
+     * This is the correct way to do this, not {@link #testTransactionWithCidIds()}
+     */
+    @Test
+    public void testTransactionWithCidIdsUnqualified() throws Exception {
+        List<IResource> res = new ArrayList<IResource>();
+
+        Patient p1 = new Patient();
+        p1.setId("cid:patient1");
+        p1.addIdentifier().setSystem("system").setValue("testTransactionWithCidIdsUnqualified01");
+        res.add(p1);
+
+        Observation o1 = new Observation();
+        o1.setId("cid:observation1");
+        o1.getIdentifier().setSystem("system").setValue("testTransactionWithCidIdsUnqualified02");
+        o1.setSubject(new ResourceReferenceDt("cid:patient1"));
+        res.add(o1);
+
+        Observation o2 = new Observation();
+        o2.setId("cid:observation2");
+        o2.getIdentifier().setSystem("system").setValue("testTransactionWithCidIdsUnqualified03");
+        o2.setSubject(new ResourceReferenceDt("cid:patient1"));
+        res.add(o2);
+
+        ourSystemDao.transaction(res);
+
+        assertTrue(p1.getId().getValue(), p1.getId().getIdPart().matches("^[0-9]+$"));
+        assertTrue(o1.getId().getValue(), o1.getId().getIdPart().matches("^[0-9]+$"));
+        assertTrue(o2.getId().getValue(), o2.getId().getIdPart().matches("^[0-9]+$"));
+
+        assertThat(o1.getSubject().getReference().getValue(), endsWith("Patient/" + p1.getId().getIdPart()));
+        assertThat(o2.getSubject().getReference().getValue(), endsWith("Patient/" + p1.getId().getIdPart()));
+
+    }
+
+    @Test
+    public void testTransactionWithDelete() throws Exception {
+>>>>>>> 0479a48a416ef18fb5a7f1c3faf368fc1f5b3e12
 
 		/*
 		 * Create 3
diff --git a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu2Test.java b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu2Test.java
index fe61b15..2112192 100644
--- a/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu2Test.java
+++ b/hapi-fhir-jpaserver-base/src/test/java/ca/uhn/fhir/jpa/dao/FhirSystemDaoDstu2Test.java
@@ -5,12 +5,7 @@ import static org.hamcrest.Matchers.emptyString;
 import static org.hamcrest.Matchers.endsWith;
 import static org.hamcrest.Matchers.not;
 import static org.hamcrest.Matchers.startsWith;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.fail;
+import static org.junit.Assert.*;
 
 import java.io.InputStream;
 import java.util.ArrayList;
@@ -31,6 +26,7 @@ import ca.uhn.fhir.model.api.IResource;
 import ca.uhn.fhir.model.api.ResourceMetadataKeyEnum;
 import ca.uhn.fhir.model.api.TagList;
 import ca.uhn.fhir.model.base.composite.BaseCodingDt;
+import ca.uhn.fhir.model.dstu2.composite.ResourceReferenceDt;
 import ca.uhn.fhir.model.dstu2.composite.CodingDt;
 import ca.uhn.fhir.model.dstu2.composite.MetaDt;
 import ca.uhn.fhir.model.dstu2.resource.Bundle;
@@ -54,10 +50,104 @@ public class FhirSystemDaoDstu2Test {
 	private static ClassPathXmlApplicationContext ourCtx;
 	private static FhirContext ourFhirContext;
 	private static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(FhirSystemDaoDstu2Test.class);
+	private static IFhirResourceDao<Observation> ourObservationDao;
 	private static IFhirResourceDao<Patient> ourPatientDao;
 	private static IFhirSystemDao<Bundle> ourSystemDao;
-	private static IFhirResourceDao<Observation> ourObservationDao;
-	
+
+	private void deleteEverything() {
+		FhirSystemDaoDstu2Test.doDeleteEverything(ourSystemDao);
+	}
+
+	@Test
+	public void testSystemMetaOperation() {
+		deleteEverything();
+
+		MetaDt meta = ourSystemDao.metaGetOperation();
+		List<CodingDt> published = meta.getTag();
+		assertEquals(0, published.size());
+
+		String methodName = "testSystemMetaOperation";
+		IdDt id1;
+		{
+			Patient patient = new Patient();
+			patient.addIdentifier().setSystem("urn:system").setValue(methodName);
+			patient.addName().addFamily("Tester").addGiven("Joe");
+			TagList tagList = new TagList();
+			tagList.addTag(null, "Dog", "Puppies");
+			ResourceMetadataKeyEnum.TAG_LIST.put(patient, tagList);
+
+			List<BaseCodingDt> securityLabels = new ArrayList<BaseCodingDt>();
+			securityLabels.add(new CodingDt().setSystem("seclabel:sys:1").setCode("seclabel:code:1").setDisplay("seclabel:dis:1"));
+			ResourceMetadataKeyEnum.SECURITY_LABELS.put(patient, securityLabels);
+
+			ArrayList<IdDt> profiles = new ArrayList<IdDt>();
+			profiles.add(new IdDt("http://profile/1"));
+			ResourceMetadataKeyEnum.PROFILES.put(patient, profiles);
+
+			id1 = ourPatientDao.create(patient).getId();
+		}
+		{
+			Patient patient = new Patient();
+			patient.addIdentifier().setSystem("urn:system").setValue(methodName);
+			patient.addName().addFamily("Tester").addGiven("Joe");
+			TagList tagList = new TagList();
+			tagList.addTag("http://foo", "Cat", "Kittens");
+			ResourceMetadataKeyEnum.TAG_LIST.put(patient, tagList);
+
+			List<BaseCodingDt> securityLabels = new ArrayList<BaseCodingDt>();
+			securityLabels.add(new CodingDt().setSystem("seclabel:sys:2").setCode("seclabel:code:2").setDisplay("seclabel:dis:2"));
+			ResourceMetadataKeyEnum.SECURITY_LABELS.put(patient, securityLabels);
+
+			ArrayList<IdDt> profiles = new ArrayList<IdDt>();
+			profiles.add(new IdDt("http://profile/2"));
+			ResourceMetadataKeyEnum.PROFILES.put(patient, profiles);
+
+			ourPatientDao.create(patient);
+		}
+
+		meta = ourSystemDao.metaGetOperation();
+		published = meta.getTag();
+		assertEquals(2, published.size());
+		assertEquals(null, published.get(0).getSystem());
+		assertEquals("Dog", published.get(0).getCode());
+		assertEquals("Puppies", published.get(0).getDisplay());
+		assertEquals("http://foo", published.get(1).getSystem());
+		assertEquals("Cat", published.get(1).getCode());
+		assertEquals("Kittens", published.get(1).getDisplay());
+		List<CodingDt> secLabels = meta.getSecurity();
+		assertEquals(2, secLabels.size());
+		assertEquals("seclabel:sys:1", secLabels.get(0).getSystemElement().getValue());
+		assertEquals("seclabel:code:1", secLabels.get(0).getCodeElement().getValue());
+		assertEquals("seclabel:dis:1", secLabels.get(0).getDisplayElement().getValue());
+		assertEquals("seclabel:sys:2", secLabels.get(1).getSystemElement().getValue());
+		assertEquals("seclabel:code:2", secLabels.get(1).getCodeElement().getValue());
+		assertEquals("seclabel:dis:2", secLabels.get(1).getDisplayElement().getValue());
+		List<UriDt> profiles = meta.getProfile();
+		assertEquals(2, profiles.size());
+		assertEquals("http://profile/1", profiles.get(0).getValue());
+		assertEquals("http://profile/2", profiles.get(1).getValue());
+
+		ourPatientDao.removeTag(id1, TagTypeEnum.TAG, null, "Dog");
+		ourPatientDao.removeTag(id1, TagTypeEnum.SECURITY_LABEL, "seclabel:sys:1", "seclabel:code:1");
+		ourPatientDao.removeTag(id1, TagTypeEnum.PROFILE, BaseFhirDao.NS_JPA_PROFILE, "http://profile/1");
+
+		meta = ourSystemDao.metaGetOperation();
+		published = meta.getTag();
+		assertEquals(1, published.size());
+		assertEquals("http://foo", published.get(0).getSystem());
+		assertEquals("Cat", published.get(0).getCode());
+		assertEquals("Kittens", published.get(0).getDisplay());
+		secLabels = meta.getSecurity();
+		assertEquals(1, secLabels.size());
+		assertEquals("seclabel:sys:2", secLabels.get(0).getSystemElement().getValue());
+		assertEquals("seclabel:code:2", secLabels.get(0).getCodeElement().getValue());
+		assertEquals("seclabel:dis:2", secLabels.get(0).getDisplayElement().getValue());
+		profiles = meta.getProfile();
+		assertEquals(1, profiles.size());
+		assertEquals("http://profile/2", profiles.get(0).getValue());
+
+	}
+
 	@Test
 	public void testTransactionCreateMatchUrlWithOneMatch() {
 		String methodName = "testTransactionCreateMatchUrlWithOneMatch";
@@ -101,6 +191,7 @@ public class FhirSystemDaoDstu2Test {
 	}
 
 	@Test
+<<<<<<< HEAD
 	public void testTransactionCreateWithInvalidReferenceNumeric() {
 		String methodName = "testTransactionCreateWithInvalidReferenceNumeric";
 		Bundle request = new Bundle();
@@ -221,6 +312,8 @@ public class FhirSystemDaoDstu2Test {
 	}
 
 	@Test
+=======
+>>>>>>> 0479a48a416ef18fb5a7f1c3faf368fc1f5b3e12
 	public void testTransactionCreateMatchUrlWithTwoMatch() {
 		String methodName = "testTransactionCreateMatchUrlWithTwoMatch";
 
@@ -311,6 +404,89 @@ public class FhirSystemDaoDstu2Test {
 	}
 
 	@Test
+	public void testTransactionCreateWithInvalidReferenceNumeric() {
+		String methodName = "testTransactionCreateWithInvalidReferenceNumeric";
+		Bundle request = new Bundle();
+
+		Patient p = new Patient();
+		p.addIdentifier().setSystem("urn:system").setValue(methodName);
+		p.addName().addFamily("Hello");
+		p.getManagingOrganization().setReference("Organization/9999999999999999");
+		request.addEntry().setResource(p).getTransaction().setMethod(HTTPVerbEnum.POST);
+
+		try {
+			ourSystemDao.transaction(request);
+			fail();
+		} catch (InvalidRequestException e) {
+			assertThat(e.getMessage(), containsString("Resource Organization/9999999999999999 not found, specified in path: Patient.managingOrganization"));
+		}
+	}
+
+	@Test
+	public void testTransactionCreateWithInvalidReferenceTextual() {
+		String methodName = "testTransactionCreateWithInvalidReferenceTextual";
+		Bundle request = new Bundle();
+
+		Patient p = new Patient();
+		p.addIdentifier().setSystem("urn:system").setValue(methodName);
+		p.addName().addFamily("Hello");
+		p.getManagingOrganization().setReference("Organization/" + methodName);
+		request.addEntry().setResource(p).getTransaction().setMethod(HTTPVerbEnum.POST);
+
+		try {
+			ourSystemDao.transaction(request);
+			fail();
+		} catch (InvalidRequestException e) {
+			assertThat(e.getMessage(), containsString("Resource Organization/" + methodName + " not found, specified in path: Patient.managingOrganization"));
+		}
+	}
+
+	@Test
+	public void testTransactionDeleteByResourceId() {
+		String methodName = "testTransactionDeleteByResourceId";
+
+		Patient p1 = new Patient();
+		p1.addIdentifier().setSystem("urn:system").setValue(methodName);
+		IdDt id1 = ourPatientDao.create(p1).getId();
+		ourLog.info("Created patient, got it: {}", id1);
+
+		Patient p2 = new Patient();
+		p2.addIdentifier().setSystem("urn:system").setValue(methodName);
+		p2.setId("Patient/" + methodName);
+		IdDt id2 = ourPatientDao.update(p2).getId();
+		ourLog.info("Created patient, got it: {}", id2);
+
+		Bundle request = new Bundle();
+
+		request.addEntry().getTransaction().setMethod(HTTPVerbEnum.DELETE).setUrl("Patient/" + id1.getIdPart());
+		request.addEntry().getTransaction().setMethod(HTTPVerbEnum.DELETE).setUrl("Patient/" + id2.getIdPart());
+
+		ourPatientDao.read(id1.toVersionless());
+		ourPatientDao.read(id2.toVersionless());
+
+		Bundle resp = ourSystemDao.transaction(request);
+
+		assertEquals(3, resp.getEntry().size());
+		assertEquals("204", resp.getEntry().get(1).getTransactionResponse().getStatus());
+		assertEquals("204", resp.getEntry().get(2).getTransactionResponse().getStatus());
+
+		try {
+			ourPatientDao.read(id1.toVersionless());
+			fail();
+		} catch (ResourceGoneException e) {
+			// good
+		}
+
+		try {
+			ourPatientDao.read(id2.toVersionless());
+			fail();
+		} catch (ResourceGoneException e) {
+			// good
+		}
+
+	}
+
+	@Test
 	public void testTransactionDeleteMatchUrlWithOneMatch() {
 		String methodName = "testTransactionDeleteMatchUrlWithOneMatch";
 
@@ -382,51 +558,6 @@ public class FhirSystemDaoDstu2Test {
 	}
 
 	@Test
-	public void testTransactionDeleteByResourceId() {
-		String methodName = "testTransactionDeleteByResourceId";
-
-		Patient p1 = new Patient();
-		p1.addIdentifier().setSystem("urn:system").setValue(methodName);
-		IdDt id1 = ourPatientDao.create(p1).getId();
-		ourLog.info("Created patient, got it: {}", id1);
-
-		Patient p2 = new Patient();
-		p2.addIdentifier().setSystem("urn:system").setValue(methodName);
-		p2.setId("Patient/" + methodName);
-		IdDt id2 = ourPatientDao.update(p2).getId();
-		ourLog.info("Created patient, got it: {}", id2);
-
-		Bundle request = new Bundle();
-
-		request.addEntry().getTransaction().setMethod(HTTPVerbEnum.DELETE).setUrl("Patient/" + id1.getIdPart());
-		request.addEntry().getTransaction().setMethod(HTTPVerbEnum.DELETE).setUrl("Patient/" + id2.getIdPart());
-
-		ourPatientDao.read(id1.toVersionless());
-		ourPatientDao.read(id2.toVersionless());
-
-		Bundle resp = ourSystemDao.transaction(request);
-
-		assertEquals(3, resp.getEntry().size());
-		assertEquals("204", resp.getEntry().get(1).getTransactionResponse().getStatus());
-		assertEquals("204", resp.getEntry().get(2).getTransactionResponse().getStatus());
-
-		try {
-			ourPatientDao.read(id1.toVersionless());
-			fail();
-		} catch (ResourceGoneException e) {
-			// good
-		}
-
-		try {
-			ourPatientDao.read(id2.toVersionless());
-			fail();
-		} catch (ResourceGoneException e) {
-			// good
-		}
-
-	}
-
-	@Test
 	public void testTransactionDeleteMatchUrlWithZeroMatch() {
 		String methodName = "testTransactionDeleteMatchUrlWithZeroMatch";
 
@@ -485,6 +616,71 @@ public class FhirSystemDaoDstu2Test {
 	}
 
 	@Test
+	public void testTransactionFromBundle() throws Exception {
+
+		InputStream bundleRes = SystemProviderDstu2Test.class.getResourceAsStream("/transaction_link_patient_eve.xml");
+		String bundleStr = IOUtils.toString(bundleRes);
+		Bundle bundle = ourFhirContext.newXmlParser().parseResource(Bundle.class, bundleStr);
+
+		Bundle resp = ourSystemDao.transaction(bundle);
+
+		ourLog.info(ourFhirContext.newJsonParser().setPrettyPrint(true).encodeResourceToString(resp));
+
+		OperationOutcome oo = (OperationOutcome) resp.getEntry().get(0).getResource();
+		assertThat(oo.getIssue().get(0).getDetailsElement().getValue(), containsString("Transaction completed"));
+
+		assertThat(resp.getEntry().get(1).getTransactionResponse().getLocation(), startsWith("Patient/a555-44-4444/_history/"));
+		assertThat(resp.getEntry().get(2).getTransactionResponse().getLocation(), startsWith("Patient/temp6789/_history/"));
+		assertThat(resp.getEntry().get(3).getTransactionResponse().getLocation(), startsWith("Organization/GHH/_history/"));
+
+		Patient p = ourPatientDao.read(new IdDt("Patient/a555-44-4444/_history/1"));
+		assertEquals("Patient/temp6789", p.getLink().get(0).getOther().getReference().getValue());
+	}
+
+	@Test
+	public void testTransactionReadAndSearch() {
+		String methodName = "testTransactionReadAndSearch";
+
+		Patient p = new Patient();
+		p.addIdentifier().setSystem("urn:system").setValue(methodName);
+		p.setId("Patient/" + methodName);
+		IdDt idv1 = ourPatientDao.update(p).getId();
+		ourLog.info("Created patient, got id: {}", idv1);
+
+		p = new Patient();
+		p.addIdentifier().setSystem("urn:system").setValue(methodName);
+		p.addName().addFamily("Family Name");
+		p.setId("Patient/" + methodName);
+		IdDt idv2 = ourPatientDao.update(p).getId();
+		ourLog.info("Updated patient, got id: {}", idv2);
+
+		Bundle request = new Bundle();
+		request.addEntry().getTransaction().setMethod(HTTPVerbEnum.GET).setUrl(idv1.toUnqualifiedVersionless().getValue());
+		request.addEntry().getTransaction().setMethod(HTTPVerbEnum.GET).setUrl(idv1.toUnqualified().getValue());
+		request.addEntry().getTransaction().setMethod(HTTPVerbEnum.GET).setUrl("Patient?identifier=urn%3Asystem%7C" + methodName);
+
+		Bundle resp = ourSystemDao.transaction(request);
+
+		assertEquals(4, resp.getEntry().size());
+
+		Entry nextEntry;
+
+		nextEntry = resp.getEntry().get(1);
+		assertEquals(Patient.class, nextEntry.getResource().getClass());
+		assertEquals(idv2.toUnqualified(), nextEntry.getResource().getId().toUnqualified());
+
+		nextEntry = resp.getEntry().get(2);
+		assertEquals(Patient.class, nextEntry.getResource().getClass());
+		assertEquals(idv1.toUnqualified(), nextEntry.getResource().getId().toUnqualified());
+
+		nextEntry = resp.getEntry().get(3);
+		assertEquals(Bundle.class, nextEntry.getResource().getClass());
+
+		Bundle respBundle = (Bundle) nextEntry.getResource();
+		assertEquals(1, respBundle.getTotal().intValue());
+	}
+
+	@Test
 	public void testTransactionUpdateMatchUrlWithOneMatch() {
 		String methodName = "testTransactionUpdateMatchUrlWithOneMatch";
 		Bundle request = new Bundle();
@@ -576,7 +772,7 @@ public class FhirSystemDaoDstu2Test {
 
 		Observation o = new Observation();
 		o.getCode().setText("Some Observation");
-		o.getSubject().setReference("Patient/"+methodName);
+		o.getSubject().setReference("Patient/" + methodName);
 		request.addEntry().setResource(o).getTransaction().setMethod(HTTPVerbEnum.POST);
 
 		Bundle resp = ourSystemDao.transaction(request);
@@ -740,6 +936,99 @@ public class FhirSystemDaoDstu2Test {
 	//
 	// }
 
+	@Test
+	public void testTransactionWithRelativeOidIds() throws Exception {
+		Bundle res = new Bundle();
+		res.setType(BundleTypeEnum.TRANSACTION);
+
+		Patient p1 = new Patient();
+		p1.setId("urn:oid:0.1.2.3");
+		p1.addIdentifier().setSystem("system").setValue("testTransactionWithRelativeOidIds01");
+		res.addEntry().setResource(p1).getTransaction().setMethod(HTTPVerbEnum.POST).setUrl("Patient");
+
+		Observation o1 = new Observation();
+		o1.setId("cid:observation1");
+		o1.addIdentifier().setSystem("system").setValue("testTransactionWithRelativeOidIds02");
+		o1.setSubject(new ResourceReferenceDt("urn:oid:0.1.2.3"));
+		res.addEntry().setResource(o1).getTransaction().setMethod(HTTPVerbEnum.POST).setUrl("Observation");
+
+		Observation o2 = new Observation();
+		o2.setId("cid:observation2");
+		o2.addIdentifier().setSystem("system").setValue("testTransactionWithRelativeOidIds03");
+		o2.setSubject(new ResourceReferenceDt("urn:oid:0.1.2.3"));
+		res.addEntry().setResource(o2).getTransaction().setMethod(HTTPVerbEnum.POST).setUrl("Observation");
+
+		Bundle resp = ourSystemDao.transaction(res);
+		
+		ourLog.info(ourFhirContext.newXmlParser().setPrettyPrint(true).encodeResourceToString(resp));
+		
+		assertEquals(BundleTypeEnum.TRANSACTION_RESPONSE, resp.getTypeElement().getValueAsEnum());
+		assertEquals(4, resp.getEntry().size());
+
+		assertEquals(OperationOutcome.class, resp.getEntry().get(0).getResource().getClass());
+		
+		OperationOutcome outcome = (OperationOutcome) resp.getEntry().get(0).getResource();
+		assertThat(outcome.getIssue().get(1).getDetails(), containsString("Placeholder resource ID \"Patient/urn:oid:0.1.2.3\" was replaced with permanent ID \"Patient/"));
+		
+		assertTrue(resp.getEntry().get(1).getTransactionResponse().getLocation(), new IdDt(resp.getEntry().get(1).getTransactionResponse().getLocation()).getIdPart().matches("^[0-9]+$"));
+		assertTrue(resp.getEntry().get(2).getTransactionResponse().getLocation(), new IdDt(resp.getEntry().get(2).getTransactionResponse().getLocation()).getIdPart().matches("^[0-9]+$"));
+		assertTrue(resp.getEntry().get(3).getTransactionResponse().getLocation(), new IdDt(resp.getEntry().get(3).getTransactionResponse().getLocation()).getIdPart().matches("^[0-9]+$"));
+
+		o1 = ourObservationDao.read(new IdDt(resp.getEntry().get(2).getTransactionResponse().getLocation()));
+		o2 = ourObservationDao.read(new IdDt(resp.getEntry().get(3).getTransactionResponse().getLocation()));
+		assertThat(o1.getSubject().getReference().getValue(), endsWith("Patient/" + p1.getId().getIdPart()));
+		assertThat(o2.getSubject().getReference().getValue(), endsWith("Patient/" + p1.getId().getIdPart()));
+
+	}
+
+	/**
+	 * This is not the correct way to do it, but we'll allow it to be lenient
+	 */
+	@Test
+	public void testTransactionWithRelativeOidIdsQualified() throws Exception {
+		Bundle res = new Bundle();
+		res.setType(BundleTypeEnum.TRANSACTION);
+
+		Patient p1 = new Patient();
+		p1.setId("urn:oid:0.1.2.3");
+		p1.addIdentifier().setSystem("system").setValue("testTransactionWithRelativeOidIds01");
+		res.addEntry().setResource(p1).getTransaction().setMethod(HTTPVerbEnum.POST).setUrl("Patient");
+
+		Observation o1 = new Observation();
+		o1.setId("cid:observation1");
+		o1.addIdentifier().setSystem("system").setValue("testTransactionWithRelativeOidIds02");
+		o1.setSubject(new ResourceReferenceDt("Patient/urn:oid:0.1.2.3"));
+		res.addEntry().setResource(o1).getTransaction().setMethod(HTTPVerbEnum.POST).setUrl("Observation");
+
+		Observation o2 = new Observation();
+		o2.setId("cid:observation2");
+		o2.addIdentifier().setSystem("system").setValue("testTransactionWithRelativeOidIds03");
+		o2.setSubject(new ResourceReferenceDt("Patient/urn:oid:0.1.2.3"));
+		res.addEntry().setResource(o2).getTransaction().setMethod(HTTPVerbEnum.POST).setUrl("Observation");
+
+		Bundle resp = ourSystemDao.transaction(res);
+		
+		ourLog.info(ourFhirContext.newXmlParser().setPrettyPrint(true).encodeResourceToString(resp));
+		
+		assertEquals(BundleTypeEnum.TRANSACTION_RESPONSE, resp.getTypeElement().getValueAsEnum());
+		assertEquals(4, resp.getEntry().size());
+
+		assertEquals(OperationOutcome.class, resp.getEntry().get(0).getResource().getClass());
+		
+		OperationOutcome outcome = (OperationOutcome) resp.getEntry().get(0).getResource();
+		assertThat(outcome.getIssue().get(1).getDetails(), containsString("Placeholder resource ID \"Patient/urn:oid:0.1.2.3\" was replaced with permanent ID \"Patient/"));
+		
+		assertTrue(resp.getEntry().get(1).getTransactionResponse().getLocation(), new IdDt(resp.getEntry().get(1).getTransactionResponse().getLocation()).getIdPart().matches("^[0-9]+$"));
+		assertTrue(resp.getEntry().get(2).getTransactionResponse().getLocation(), new IdDt(resp.getEntry().get(2).getTransactionResponse().getLocation()).getIdPart().matches("^[0-9]+$"));
+		assertTrue(resp.getEntry().get(3).getTransactionResponse().getLocation(), new IdDt(resp.getEntry().get(3).getTransactionResponse().getLocation()).getIdPart().matches("^[0-9]+$"));
+
+		o1 = ourObservationDao.read(new IdDt(resp.getEntry().get(2).getTransactionResponse().getLocation()));
+		o2 = ourObservationDao.read(new IdDt(resp.getEntry().get(3).getTransactionResponse().getLocation()));
+		assertThat(o1.getSubject().getReference().getValue(), endsWith("Patient/" + p1.getId().getIdPart()));
+		assertThat(o2.getSubject().getReference().getValue(), endsWith("Patient/" + p1.getId().getIdPart()));
+
+	}
+
 	@AfterClass
 	public static void afterClass() {
 		ourCtx.close();
@@ -756,107 +1045,13 @@ public class FhirSystemDaoDstu2Test {
 		ourSystemDao = ourCtx.getBean("mySystemDaoDstu2", IFhirSystemDao.class);
 	}
 
-	@Test
-	public void testSystemMetaOperation() {
-		deleteEverything();
-		
-		MetaDt meta = ourSystemDao.metaGetOperation();
-		List<CodingDt> published = meta.getTag();
-		assertEquals(0, published.size());
-
-		String methodName = "testSystemMetaOperation";
-		IdDt id1;
-		{
-			Patient patient = new Patient();
-			patient.addIdentifier().setSystem("urn:system").setValue(methodName);
-			patient.addName().addFamily("Tester").addGiven("Joe");
-			TagList tagList = new TagList();
-			tagList.addTag(null, "Dog", "Puppies");
-			ResourceMetadataKeyEnum.TAG_LIST.put(patient, tagList);
-
-			List<BaseCodingDt> securityLabels = new ArrayList<BaseCodingDt>();
-			securityLabels.add(new CodingDt().setSystem("seclabel:sys:1").setCode("seclabel:code:1").setDisplay("seclabel:dis:1"));
-			ResourceMetadataKeyEnum.SECURITY_LABELS.put(patient, securityLabels);
-
-			ArrayList<IdDt> profiles = new ArrayList<IdDt>();
-			profiles.add(new IdDt("http://profile/1"));
-			ResourceMetadataKeyEnum.PROFILES.put(patient, profiles);
-
-			id1 = ourPatientDao.create(patient).getId();
-		}
-		{
-			Patient patient = new Patient();
-			patient.addIdentifier().setSystem("urn:system").setValue(methodName);
-			patient.addName().addFamily("Tester").addGiven("Joe");
-			TagList tagList = new TagList();
-			tagList.addTag("http://foo", "Cat", "Kittens");
-			ResourceMetadataKeyEnum.TAG_LIST.put(patient, tagList);
-
-			List<BaseCodingDt> securityLabels = new ArrayList<BaseCodingDt>();
-			securityLabels.add(new CodingDt().setSystem("seclabel:sys:2").setCode("seclabel:code:2").setDisplay("seclabel:dis:2"));
-			ResourceMetadataKeyEnum.SECURITY_LABELS.put(patient, securityLabels);
-
-			ArrayList<IdDt> profiles = new ArrayList<IdDt>();
-			profiles.add(new IdDt("http://profile/2"));
-			ResourceMetadataKeyEnum.PROFILES.put(patient, profiles);
-
-			ourPatientDao.create(patient);
-		}
-
-		meta = ourSystemDao.metaGetOperation();
-		published = meta.getTag();
-		assertEquals(2, published.size());
-		assertEquals(null, published.get(0).getSystem());
-		assertEquals("Dog", published.get(0).getCode());
-		assertEquals("Puppies", published.get(0).getDisplay());
-		assertEquals("http://foo", published.get(1).getSystem());
-		assertEquals("Cat", published.get(1).getCode());
-		assertEquals("Kittens", published.get(1).getDisplay());
-		List<CodingDt> secLabels = meta.getSecurity();
-		assertEquals(2, secLabels.size());
-		assertEquals("seclabel:sys:1", secLabels.get(0).getSystemElement().getValue());
-		assertEquals("seclabel:code:1", secLabels.get(0).getCodeElement().getValue());
-		assertEquals("seclabel:dis:1", secLabels.get(0).getDisplayElement().getValue());
-		assertEquals("seclabel:sys:2", secLabels.get(1).getSystemElement().getValue());
-		assertEquals("seclabel:code:2", secLabels.get(1).getCodeElement().getValue());
-		assertEquals("seclabel:dis:2", secLabels.get(1).getDisplayElement().getValue());
-		List<UriDt> profiles = meta.getProfile();
-		assertEquals(2, profiles.size());
-		assertEquals("http://profile/1", profiles.get(0).getValue());
-		assertEquals("http://profile/2", profiles.get(1).getValue());
-
-		ourPatientDao.removeTag(id1, TagTypeEnum.TAG, null, "Dog");
-		ourPatientDao.removeTag(id1, TagTypeEnum.SECURITY_LABEL, "seclabel:sys:1", "seclabel:code:1");
-		ourPatientDao.removeTag(id1, TagTypeEnum.PROFILE, BaseFhirDao.NS_JPA_PROFILE, "http://profile/1");
-
-		meta = ourSystemDao.metaGetOperation();
-		published = meta.getTag();
-		assertEquals(1, published.size());
-		assertEquals("http://foo", published.get(0).getSystem());
-		assertEquals("Cat", published.get(0).getCode());
-		assertEquals("Kittens", published.get(0).getDisplay());
-		secLabels = meta.getSecurity();
-		assertEquals(1, secLabels.size());
-		assertEquals("seclabel:sys:2", secLabels.get(0).getSystemElement().getValue());
-		assertEquals("seclabel:code:2", secLabels.get(0).getCodeElement().getValue());
-		assertEquals("seclabel:dis:2", secLabels.get(0).getDisplayElement().getValue());
-		profiles = meta.getProfile();
-		assertEquals(1, profiles.size());
-		assertEquals("http://profile/2", profiles.get(0).getValue());
-
-	}
-
-	private void deleteEverything() {
-		FhirSystemDaoDstu2Test.doDeleteEverything(ourSystemDao);
-	}
-
 	static void doDeleteEverything(IFhirSystemDao<Bundle> systemDao) {
 		IBundleProvider all = systemDao.history(null);
 		List<IBaseResource> allRes = all.getResources(0, all.size());
 		for (IBaseResource iResource : allRes) {
 			if (ResourceMetadataKeyEnum.DELETED_AT.get((IResource) iResource) == null) {
 				ourLog.info("Deleting: {}", iResource.getIdElement());
-				
+
 				Bundle b = new Bundle();
 				b.setType(BundleTypeEnum.TRANSACTION);
 				String url = iResource.getIdElement().toVersionless().getValue();
@@ -864,7 +1059,7 @@ public class FhirSystemDaoDstu2Test {
 				systemDao.transaction(b);
 			}
 		}
-		
+
 		systemDao.deleteAllTagsOnServer();
 	}
 
diff --git a/hapi-fhir-structures-dstu2/src/test/java/ca/uhn/fhir/parser/XmlParserDstu2Test.java b/hapi-fhir-structures-dstu2/src/test/java/ca/uhn/fhir/parser/XmlParserDstu2Test.java
index 6d051c4..7af67ce 100644
--- a/hapi-fhir-structures-dstu2/src/test/java/ca/uhn/fhir/parser/XmlParserDstu2Test.java
+++ b/hapi-fhir-structures-dstu2/src/test/java/ca/uhn/fhir/parser/XmlParserDstu2Test.java
@@ -57,47 +57,39 @@ import ca.uhn.fhir.model.primitive.InstantDt;
 import ca.uhn.fhir.model.primitive.StringDt;
 
 public class XmlParserDstu2Test {
-	private static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(XmlParserDstu2Test.class);
 	private static final FhirContext ourCtx = FhirContext.forDstu2();
-
-	@BeforeClass
-	public static void beforeClass() {
-		XMLUnit.setIgnoreAttributeOrder(true);
-		XMLUnit.setIgnoreComments(true);
-		XMLUnit.setIgnoreWhitespace(true);
-	}
+	private static final org.slf4j.Logger ourLog = org.slf4j.LoggerFactory.getLogger(XmlParserDstu2Test.class);
 
 	@Test
-	public void testOmitResourceId() {
-		Patient p = new Patient();
-		p.setId("123");
-		p.addName().addFamily("ABC");
+	public void testBundleWithBinary() {
+		//@formatter:off
+		String bundle = "<Bundle xmlns=\"http://hl7.org/fhir\">\n" + 
+			"   <meta/>\n" + 
+			"   <base value=\"http://localhost:52788\"/>\n" + 
+			"   <total value=\"1\"/>\n" + 
+			"   <link>\n" + 
+			"      <relation value=\"self\"/>\n" + 
+			"      <url value=\"http://localhost:52788/Binary?_pretty=true\"/>\n" + 
+			"   </link>\n" + 
+			"   <entry>\n" + 
+			"      <resource>\n" + 
+			"         <Binary xmlns=\"http://hl7.org/fhir\">\n" + 
+			"            <id value=\"1\"/>\n" + 
+			"            <meta/>\n" + 
+			"            <contentType value=\"text/plain\"/>\n" + 
+			"            <content value=\"AQIDBA==\"/>\n" + 
+			"         </Binary>\n" + 
+			"      </resource>\n" + 
+			"   </entry>\n" + 
+			"</Bundle>";
+		//@formatter:on
+		
+		Bundle b = ourCtx.newXmlParser().parseBundle(bundle);
+		assertEquals(1, b.getEntries().size());
+		
+		Binary bin = (Binary) b.getEntries().get(0).getResource();
+		assertArrayEquals(new byte[] {1,2,3,4}, bin.getContent());
 		
-		assertThat(ourCtx.newXmlParser().encodeResourceToString(p), stringContainsInOrder("123", "ABC"));
-		assertThat(ourCtx.newXmlParser().setOmitResourceId(true).encodeResourceToString(p), containsString("ABC"));
-		assertThat(ourCtx.newXmlParser().setOmitResourceId(true).encodeResourceToString(p), not(containsString("123")));
-	}
-
-	
-	@Test
-	public void testEncodeExtensionWithResourceContent() {
-		IParser parser = ourCtx.newXmlParser();
-
-		Patient patient = new Patient();
-		patient.addAddress().setUse(AddressUseEnum.HOME);
-		patient.addUndeclaredExtension(false, "urn:foo", new ResourceReferenceDt("Organization/123"));
-
-		String val = parser.encodeResourceToString(patient);
-		ourLog.info(val);
-		assertThat(val, StringContains.containsString("<extension url=\"urn:foo\"><valueReference><reference value=\"Organization/123\"/></valueReference></extension>"));
-
-		Patient actual = parser.parseResource(Patient.class, val);
-		assertEquals(AddressUseEnum.HOME.getCode(), patient.getAddress().get(0).getUse());
-		List<ExtensionDt> ext = actual.getUndeclaredExtensions();
-		assertEquals(1, ext.size());
-		ResourceReferenceDt ref = (ResourceReferenceDt) ext.get(0).getValue();
-		assertEquals("Organization/123", ref.getReference().getValue());
-
 	}
 
 	@Test
@@ -121,8 +113,105 @@ public class XmlParserDstu2Test {
 		o = (Organization) rr.getResource();
 		assertEquals("ORG", o.getName());
 	}
+
+	@Test
+	public void testDuration() {
+		Encounter enc = new Encounter();
+		DurationDt duration = new DurationDt();
+		duration.setUnits("day").setValue(123L);
+		enc.setLength(duration);
+		
+		String str = ourCtx.newXmlParser().encodeResourceToString(enc);
+		ourLog.info(str);
+		
+		assertThat(str, not(containsString("meta")));
+		assertThat(str, containsString("<length><value value=\"123\"/><units value=\"day\"/></length>"));
+	}
 	
 	@Test
+	public void testEncodeAndParseBundleWithoutResourceIds() {
+		Organization org = new Organization();
+		org.addIdentifier().setSystem("urn:system").setValue("someval");
+		
+		Bundle bundle = Bundle.withSingleResource(org);
+		String str = ourCtx.newXmlParser().encodeBundleToString(bundle);
+		ourLog.info(str);
+		
+		Bundle parsed = ourCtx.newXmlParser().parseBundle(str);
+		assertThat(parsed.getEntries().get(0).getResource().getId().getValue(), emptyOrNullString());
+		assertTrue(parsed.getEntries().get(0).getResource().getId().isEmpty());
+	}
+
+	@Test
+	public void testEncodeAndParseContained() {
+		IParser xmlParser = ourCtx.newXmlParser().setPrettyPrint(true);
+
+		// Create an organization, note that the organization does not have an ID
+		Organization org = new Organization();
+		org.getNameElement().setValue("Contained Test Organization");
+
+		// Create a patient
+		Patient patient = new Patient();
+		patient.setId("Patient/1333");
+		patient.addIdentifier().setSystem("urn:mrns").setValue("253345");
+
+		// Put the organization as a reference in the patient resource
+		patient.getManagingOrganization().setResource(org);
+
+		String encoded = xmlParser.encodeResourceToString(patient);
+		ourLog.info(encoded);
+		assertThat(encoded, containsString("<contained>"));
+		assertThat(encoded, containsString("<reference value=\"#1\"/>"));
+
+		// Create a bundle with just the patient resource
+		ca.uhn.fhir.model.dstu2.resource.Bundle b = new ca.uhn.fhir.model.dstu2.resource.Bundle();
+		b.addEntry().setResource(patient);
+
+		// Encode the bundle
+		encoded = xmlParser.encodeResourceToString(b);
+		ourLog.info(encoded);
+		assertThat(encoded, stringContainsInOrder(Arrays.asList("<contained>", "<id value=\"1\"/>", "</contained>")));
+		assertThat(encoded, containsString("<reference value=\"#1\"/>"));
+		assertThat(encoded, stringContainsInOrder(Arrays.asList("<entry>", "</entry>")));
+		assertThat(encoded, not(stringContainsInOrder(Arrays.asList("<entry>", "</entry>", "<entry>"))));
+
+		// Re-parse the bundle
+		patient = (Patient) xmlParser.parseResource(xmlParser.encodeResourceToString(patient));
+		assertEquals("#1", patient.getManagingOrganization().getReference().getValue());
+
+		assertNotNull(patient.getManagingOrganization().getResource());
+		org = (Organization) patient.getManagingOrganization().getResource();
+		assertEquals("#1", org.getId().getValue());
+		assertEquals("Contained Test Organization", org.getName());
+
+		// And re-encode a second time
+		encoded = xmlParser.encodeResourceToString(patient);
+		ourLog.info(encoded);
+		assertThat(encoded, stringContainsInOrder(Arrays.asList("<contained>", "<Organization ", "<id value=\"1\"/>", "</Organization", "</contained>", "<reference value=\"#1\"/>")));
+		assertThat(encoded, not(stringContainsInOrder(Arrays.asList("<contained>", "<Org", "<contained>"))));
+		assertThat(encoded, containsString("<reference value=\"#1\"/>"));
+
+		// And re-encode once more, with the references cleared
+		patient.getContained().getContainedResources().clear();
+		patient.getManagingOrganization().setReference((String)null);
+		encoded = xmlParser.encodeResourceToString(patient);
+		ourLog.info(encoded);
+		assertThat(encoded, stringContainsInOrder(Arrays.asList("<contained>", "<Organization ", "<id value=\"1\"/>", "</Organization", "</contained>", "<reference value=\"#1\"/>")));
+		assertThat(encoded, not(stringContainsInOrder(Arrays.asList("<contained>", "<Org", "<contained>"))));
+		assertThat(encoded, containsString("<reference value=\"#1\"/>"));
+
+		// And re-encode once more, with the references cleared and a manually set local ID
+		patient.getContained().getContainedResources().clear();
+		patient.getManagingOrganization().setReference((String)null);
+		patient.getManagingOrganization().getResource().setId(("#333"));
+		encoded = xmlParser.encodeResourceToString(patient);
+		ourLog.info(encoded);
+		assertThat(encoded, stringContainsInOrder(Arrays.asList("<contained>", "<Organization ", "<id value=\"333\"/>", "</Organization", "</contained>", "<reference value=\"#333\"/>")));
+		assertThat(encoded, not(stringContainsInOrder(Arrays.asList("<contained>", "<Org", "<contained>"))));
+
+	}
+
+	@Test
 	public void testEncodeAndParseExtensionOnResourceReference() {
 		DataElement de = new DataElement();
 		Binding b = de.addElement().getBinding();
@@ -148,247 +237,7 @@ public class XmlParserDstu2Test {
 	}
 
 	@Test
-	public void testParseAndEncodeExtensionOnResourceReference() {
-		//@formatter:off
-		String input = "<DataElement>" + 
-				"<id value=\"gender\"/>"+ 
-				"<contained>"+ 
-				"<ValueSet>"+ 
-				"<id value=\"2179414\"/>"+ 
-				"<url value=\"2179414\"/>"+ 
-				"<version value=\"1.0\"/>"+ 
-				"<name value=\"Gender Code\"/>"+ 
-				"<description value=\"All codes representing the gender of a person.\"/>"+ 
-				"<status value=\"active\"/>"+ 
-				"<compose>"+ 
-				"<include>"+ 
-				"<system value=\"http://ncit.nci.nih.gov\"/>"+ 
-				"<concept>"+ 
-				"<code value=\"C17998\"/>"+ 
-				"<display value=\"Unknown\"/>"+ 
-				"</concept>"+ 
-				"<concept>"+ 
-				"<code value=\"C20197\"/>"+ 
-				"<display value=\"Male\"/>"+ 
-				"</concept>"+ 
-				"<concept>"+ 
-				"<code value=\"C16576\"/>"+ 
-				"<display value=\"Female\"/>"+ 
-				"</concept>"+ 
-				"<concept>"+ 
-				"<code value=\"C38046\"/>"+ 
-				"<display value=\"Not specified\"/>"+ 
-				"</concept>"+ 
-				"</include>"+ 
-				"</compose>"+ 
-				"</ValueSet>"+ 
-				"</contained>"+ 
-				"<contained>"+ 
-				"<ValueSet>"+ 
-				"<id value=\"2179414-permitted\"/>"+ 
-				"<status value=\"active\"/>"+ 
-				"<define>"+ 
-				"<system value=\"http://example.org/fhir/2179414\"/>"+ 
-				"<caseSensitive value=\"true\"/>"+ 
-				"<concept>"+ 
-				"<code value=\"0\"/>"+ 
-				"</concept>"+ 
-				"<concept>"+ 
-				"<code value=\"1\"/>"+ 
-				"</concept>"+ 
-				"<concept>"+ 
-				"<code value=\"2\"/>"+ 
-				"</concept>"+ 
-				"<concept>"+ 
-				"<code value=\"3\"/>"+ 
-				"</concept>"+ 
-				"</define>"+ 
-				"</ValueSet>"+ 
-				"</contained>"+ 
-				"<contained>"+ 
-				"<ConceptMap>"+ 
-				"<id value=\"2179414-cm\"/>"+ 
-				"<status value=\"active\"/>"+ 
-				"<sourceReference>"+ 
-				"<reference value=\"#2179414\"/>"+ 
-				"</sourceReference>"+ 
-				"<targetReference>"+ 
-				"<reference value=\"#2179414-permitted\"/>"+ 
-				"</targetReference>"+ 
-				"<element>"+ 
-				"<code value=\"C17998\"/>"+ 
-				"<map>"+ 
-				"<code value=\"0\"/>"+ 
-				"<equivalence value=\"equal\"/>"+ 
-				"</map>"+ 
-				"</element>"+ 
-				"<element>"+ 
-				"<code value=\"C20197\"/>"+ 
-				"<map>"+ 
-				"<code value=\"1\"/>"+ 
-				"<equivalence value=\"equal\"/>"+ 
-				"</map>"+ 
-				"</element>"+ 
-				"<element>"+ 
-				"<code value=\"C16576\"/>"+ 
-				"<map>"+ 
-				"<code value=\"2\"/>"+ 
-				"<equivalence value=\"equal\"/>"+ 
-				"</map>"+ 
-				"</element>"+ 
-				"<element>"+ 
-				"<code value=\"C38046\"/>"+ 
-				"<map>"+ 
-				"<code value=\"3\"/>"+ 
-				"<equivalence value=\"equal\"/>"+ 
-				"</map>"+ 
-				"</element>"+ 
-				"</ConceptMap>"+ 
-				"</contained>"+ 
-				"<identifier>"+ 
-				"<value value=\"2179650\"/>"+ 
-				"</identifier>"+ 
-				"<version value=\"1.0\"/>"+ 
-				"<name value=\"Gender Code\"/>"+ 
-				"<useContext>"+ 
-				"<coding>"+ 
-				"<system value=\"http://example.org/FBPP\"/>"+ 
-				"<display value=\"FBPP Pooled Database\"/>"+ 
-				"</coding>"+ 
-				"<coding>"+ 
-				"<system value=\"http://example.org/PhenX\"/>"+ 
-				"<display value=\"Demographics\"/>"+ 
-				"</coding>"+ 
-				"<coding>"+ 
-				"<system value=\"http://example.org/EligibilityCriteria\"/>"+ 
-				"<display value=\"Pt. Administrative\"/>"+ 
-				"</coding>"+ 
-				"<coding>"+ 
-				"<system value=\"http://example.org/UAMSClinicalResearch\"/>"+ 
-				"<display value=\"UAMS New CDEs\"/>"+ 
-				"</coding>"+ 
-				"<coding>"+ 
-				"<system value=\"http://example.org/PhenX\"/>"+ 
-				"<display value=\"Substance Abuse and \"/>"+ 
-				"</coding>"+ 
-				"<coding>"+ 
-				"<system value=\"http://example.org/Category\"/>"+ 
-				"<display value=\"CSAERS Adverse Event\"/>"+ 
-				"</coding>"+ 
-				"<coding>"+ 
-				"<system value=\"http://example.org/PhenX\"/>"+ 
-				"<display value=\"Core: Tier 1\"/>"+ 
-				"</coding>"+ 
-				"<coding>"+ 
-				"<system value=\"http://example.org/Category\"/>"+ 
-				"<display value=\"Case Report Forms\"/>"+ 
-				"</coding>"+ 
-				"<coding>"+ 
-				"<system value=\"http://example.org/Category\"/>"+ 
-				"<display value=\"CSAERS Review Set\"/>"+ 
-				"</coding>"+ 
-				"<coding>"+ 
-				"<system value=\"http://example.org/Demonstration%20Applications\"/>"+ 
-				"<display value=\"CIAF\"/>"+ 
-				"</coding>"+ 
-				"<coding>"+ 
-				"<system value=\"http://example.org/NIDA%20CTN%20Usage\"/>"+ 
-				"<display value=\"Clinical Research\"/>"+ 
-				"</coding>"+ 
-				"<coding>"+ 
-				"<system value=\"http://example.org/NIDA%20CTN%20Usage\"/>"+ 
-				"<display value=\"Electronic Health Re\"/>"+ 
-				"</coding>"+ 
-				"<coding>"+ 
-				"<system value=\"http://example.org/Condition\"/>"+ 
-				"<display value=\"Barretts Esophagus\"/>"+ 
-				"</coding>"+ 
-				"<coding>"+ 
-				"<system value=\"http://example.org/Condition\"/>"+ 
-				"<display value=\"Bladder Cancer\"/>"+ 
-				"</coding>"+ 
-				"<coding>"+ 
-				"<system value=\"http://example.org/Condition\"/>"+ 
-				"<display value=\"Oral Leukoplakia\"/>"+ 
-				"</coding>"+ 
-				"<coding>"+ 
-				"<system value=\"http://example.org/Condition\"/>"+ 
-				"<display value=\"Sulindac for Breast\"/>"+ 
-				"</coding>"+ 
-				"</useContext>"+ 
-				"<status value=\"active\"/>"+ 
-				"<publisher value=\"DCP\"/>"+ 
-				"<element>"+ 
-				"<extension url=\"http://hl7.org/fhir/StructureDefinition/minLength\">"+ 
-				"<valueInteger value=\"1\"/>"+ 
-				"</extension>"+ 
-				"<extension url=\"http://hl7.org/fhir/StructureDefinition/elementdefinition-question\">"+ 
-				"<valueString value=\"Gender\"/>"+ 
-				"</extension>"+ 
-				"<path value=\"Gender\"/>"+ 
-				"<definition value=\"The code representing the gender of a person.\"/>"+ 
-				"<type>"+ 
-				"<code value=\"CodeableConcept\"/>"+ 
-				"</type>"+ 
-				"<maxLength value=\"13\"/>"+ 
-				"<binding>"+ 
-				"<name value=\"Gender\"/>"+ 
-				"<strength value=\"required\"/>"+ 
-				"<valueSetReference>"+ 
-				"<extension url=\"http://hl7.org/fhir/StructureDefinition/11179-permitted-value-valueset\">"+ 
-				"<valueReference>"+ 
-				"<reference value=\"#2179414-permitted\"/>"+ 
-				"</valueReference>"+ 
-				"</extension>"+ 
-				"<extension url=\"http://hl7.org/fhir/StructureDefinition/11179-permitted-value-conceptmap\">"+ 
-				"<valueReference>"+ 
-				"<reference value=\"#2179414-cm\"/>"+ 
-				"</valueReference>"+ 
-				"</extension>"+ 
-				"<reference value=\"#2179414\"/>"+ 
-				"</valueSetReference>"+ 
-				"</binding>"+ 
-				"</element>"+ 
-				"</DataElement>";
-		//@formatter:on
-		DataElement de = ourCtx.newXmlParser().parseResource(DataElement.class, input);
-		String output = ourCtx.newXmlParser().encodeResourceToString(de).replace(" xmlns=\"http://hl7.org/fhir\"", "");
-		
-		ElementDefinitionDt elem = de.getElement().get(0);
-		Binding b = elem.getBinding();
-		assertEquals("Gender", b.getName());
-		
-		ResourceReferenceDt ref = (ResourceReferenceDt) b.getValueSet();
-		assertEquals("#2179414", ref.getReference().getValue());
-		
-		assertEquals(2, ref.getUndeclaredExtensions().size());
-		ExtensionDt ext = ref.getUndeclaredExtensions().get(0);
-		assertEquals("http://hl7.org/fhir/StructureDefinition/11179-permitted-value-valueset", ext.getUrl());
-		assertEquals(ResourceReferenceDt.class, ext.getValue().getClass());
-		assertEquals("#2179414-permitted", ((ResourceReferenceDt)ext.getValue()).getReference().getValue());
-		
-		ourLog.info(ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(de));
-		
-		assertThat(output, containsString("http://hl7.org/fhir/StructureDefinition/11179-permitted-value-valueset"));
-		
-		ourLog.info("Expected: {}", input);
-		ourLog.info("Actual  : {}", output);
-		assertEquals(input, output);
-	}
-	
-	@Test
-	public void testEncodeBinaryWithNoContentType() {
-		Binary b = new Binary();
-		b.setContent(new byte[] {1,2,3,4});
-		
-		String output = ourCtx.newXmlParser().encodeResourceToString(b);
-		ourLog.info(output);
-		
-		assertEquals("<Binary xmlns=\"http://hl7.org/fhir\"><content value=\"AQIDBA==\"/></Binary>", output);
-	}
-	
-	@Test
-	public void testMoreExtensions() throws Exception {
+	public void testEncodeAndParseExtensions() throws Exception {
 
 		Patient patient = new Patient();
 		patient.addIdentifier().setUse(IdentifierUseEnum.OFFICIAL).setSystem("urn:example").setValue("7000135");
@@ -396,14 +245,23 @@ public class XmlParserDstu2Test {
 		ExtensionDt ext = new ExtensionDt();
 		ext.setUrl("http://example.com/extensions#someext");
 		ext.setValue(new DateTimeDt("2011-01-02T11:13:15"));
-
-		// Add the extension to the resource
 		patient.addUndeclaredExtension(ext);
-		// END SNIPPET: resourceExtension
 
-		// START SNIPPET: resourceStringExtension
+		ExtensionDt parent = new ExtensionDt().setUrl("http://example.com#parent");
+		patient.addUndeclaredExtension(parent);
+		ExtensionDt child1 = new ExtensionDt().setUrl("http://example.com#child").setValue(new StringDt("value1"));
+		parent.addUndeclaredExtension(child1);
+		ExtensionDt child2 = new ExtensionDt().setUrl("http://example.com#child").setValue(new StringDt("value2"));
+		parent.addUndeclaredExtension(child2);
+
+		ExtensionDt modExt = new ExtensionDt();
+		modExt.setUrl("http://example.com/extensions#modext");
+		modExt.setValue(new DateDt("1995-01-02"));
+		modExt.setModifier(true);
+		patient.addUndeclaredExtension(modExt);
+
 		HumanNameDt name = patient.addName();
-		name.addFamily("Shmoe");
+		name.addFamily("Blah");
 		StringDt given = name.addGiven();
 		given.setValue("Joe");
 		ExtensionDt ext2 = new ExtensionDt().setUrl("http://examples.com#givenext").setValue(new StringDt("given"));
@@ -413,291 +271,282 @@ public class XmlParserDstu2Test {
 		given2.setValue("Shmoe");
 		ExtensionDt given2ext = new ExtensionDt().setUrl("http://examples.com#givenext_parent");
 		given2.addUndeclaredExtension(given2ext);
-		ExtensionDt givenExtChild = new ExtensionDt();
-		givenExtChild.setUrl("http://examples.com#givenext_child").setValue(new StringDt("CHILD"));
-		given2ext.addUndeclaredExtension(givenExtChild);
-		// END SNIPPET: resourceStringExtension
-
-		// START SNIPPET: subExtension
-		ExtensionDt parent = new ExtensionDt().setUrl("http://example.com#parent");
-		patient.addUndeclaredExtension(parent);
-
-		ExtensionDt child1 = new ExtensionDt().setUrl("http://example.com#child").setValue(new StringDt("value1"));
-		parent.addUndeclaredExtension(child1);
-
-		ExtensionDt child2 = new ExtensionDt().setUrl("http://example.com#child").setValue(new StringDt("value1"));
-		parent.addUndeclaredExtension(child2);
-		// END SNIPPET: subExtension
+		given2ext.addUndeclaredExtension(new ExtensionDt().setUrl("http://examples.com#givenext_child").setValue(new StringDt("CHILD")));
 
 		String output = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(patient);
 		ourLog.info(output);
 
 		String enc = ourCtx.newXmlParser().encodeResourceToString(patient);
 		assertThat(enc, containsString("<Patient xmlns=\"http://hl7.org/fhir\"><extension url=\"http://example.com/extensions#someext\"><valueDateTime value=\"2011-01-02T11:13:15\"/></extension>"));
+		assertThat(enc, containsString("<modifierExtension url=\"http://example.com/extensions#modext\"><valueDate value=\"1995-01-02\"/></modifierExtension>"));
 		assertThat(
 				enc,
-				containsString("<extension url=\"http://example.com#parent\"><extension url=\"http://example.com#child\"><valueString value=\"value1\"/></extension><extension url=\"http://example.com#child\"><valueString value=\"value1\"/></extension></extension>"));
+				containsString("<extension url=\"http://example.com#parent\"><extension url=\"http://example.com#child\"><valueString value=\"value1\"/></extension><extension url=\"http://example.com#child\"><valueString value=\"value2\"/></extension></extension>"));
 		assertThat(enc, containsString("<given value=\"Joe\"><extension url=\"http://examples.com#givenext\"><valueString value=\"given\"/></extension></given>"));
 		assertThat(enc, containsString("<given value=\"Shmoe\"><extension url=\"http://examples.com#givenext_parent\"><extension url=\"http://examples.com#givenext_child\"><valueString value=\"CHILD\"/></extension></extension></given>"));
+		
+		/*
+		 * Now parse this back
+		 */
+
+		Patient parsed = ourCtx.newXmlParser().parseResource(Patient.class, enc);
+		ext = parsed.getUndeclaredExtensions().get(0);
+		assertEquals("http://example.com/extensions#someext", ext.getUrl());
+		assertEquals("2011-01-02T11:13:15", ((DateTimeDt) ext.getValue()).getValueAsString());
+
+		parent = patient.getUndeclaredExtensions().get(1);
+		assertEquals("http://example.com#parent", parent.getUrl());
+		assertNull(parent.getValue());
+		child1 = parent.getExtension().get(0);
+		assertEquals("http://example.com#child", child1.getUrl());
+		assertEquals("value1", ((StringDt) child1.getValue()).getValueAsString());
+		child2 = parent.getExtension().get(1);
+		assertEquals("http://example.com#child", child2.getUrl());
+		assertEquals("value2", ((StringDt) child2.getValue()).getValueAsString());
+
+		modExt = parsed.getUndeclaredModifierExtensions().get(0);
+		assertEquals("http://example.com/extensions#modext", modExt.getUrl());
+		assertEquals("1995-01-02", ((DateDt) modExt.getValue()).getValueAsString());
+
+		name = parsed.getName().get(0);
+
+		ext2 = name.getGiven().get(0).getUndeclaredExtensions().get(0);
+		assertEquals("http://examples.com#givenext", ext2.getUrl());
+		assertEquals("given", ((StringDt) ext2.getValue()).getValueAsString());
+
+		given2ext = name.getGiven().get(1).getUndeclaredExtensions().get(0);
+		assertEquals("http://examples.com#givenext_parent", given2ext.getUrl());
+		assertNull(given2ext.getValue());
+		ExtensionDt given2ext2 = given2ext.getExtension().get(0);
+		assertEquals("http://examples.com#givenext_child", given2ext2.getUrl());
+		assertEquals("CHILD", ((StringDt) given2ext2.getValue()).getValue());
+
 	}
 
-	
 	@Test
-	public void testEncodeNonContained() {
-		// Create an organization
-		Organization org = new Organization();
-		org.setId("Organization/65546");
-		org.getNameElement().setValue("Contained Test Organization");
+	public void testEncodeAndParseMetaProfileAndTags() {
+		Patient p = new Patient();
+		p.addName().addFamily("FAMILY");
+		
+		List<IdDt> profiles = new ArrayList<IdDt>();
+		profiles.add(new IdDt("http://foo/Profile1"));
+		profiles.add(new IdDt("http://foo/Profile2"));
+		ResourceMetadataKeyEnum.PROFILES.put(p, profiles);
 
-		// Create a patient
-		Patient patient = new Patient();
-		patient.setId("Patient/1333");
-		patient.addIdentifier().setSystem("urn:mrns").setValue("253345");
-		patient.getManagingOrganization().setResource(org);
+		TagList tagList = new TagList();
+		tagList.addTag("scheme1", "term1", "label1");
+		tagList.addTag("scheme2", "term2", "label2");
+		ResourceMetadataKeyEnum.TAG_LIST.put(p, tagList);
 		
-		// Create a list containing both resources. In a server method, you might just
-		// return this list, but here we will create a bundle to encode.
-		List<IBaseResource> resources = new ArrayList<IBaseResource>();
-		resources.add(org);
-		resources.add(patient);		
+		String enc = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(p);
+		ourLog.info(enc);
 		
-		// Create a bundle with both
-		ca.uhn.fhir.model.dstu2.resource.Bundle b = new ca.uhn.fhir.model.dstu2.resource.Bundle();
-		b.addEntry().setResource(org);
-		b.addEntry().setResource(patient);
+		//@formatter:off
+		assertThat(enc, stringContainsInOrder("<Patient xmlns=\"http://hl7.org/fhir\">", 
+			"<meta>",
+			"<meta>",
+			"<profile value=\"http://foo/Profile1\"/>",
+			"<profile value=\"http://foo/Profile2\"/>",
+			"<tag>",
+			"<system value=\"scheme1\"/>",
+			"<code value=\"term1\"/>",
+			"<display value=\"label1\"/>",
+			"</tag>",
+			"<tag>",
+			"<system value=\"scheme2\"/>",
+			"<code value=\"term2\"/>",
+			"<display value=\"label2\"/>",
+			"</tag>",
+			"</meta>",
+			"</meta>",
+			"<name>",
+			"<family value=\"FAMILY\"/>",
+			"</name>", 
+			"</Patient>"));
+		//@formatter:on
 		
-		// Encode the buntdle
-		String encoded = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(b);
-		ourLog.info(encoded);
-		assertThat(encoded, not(containsString("<contained>")));
-		assertThat(encoded, stringContainsInOrder("<Organization", "<id value=\"65546\"/>", "</Organization>"));
-		assertThat(encoded, containsString("<reference value=\"Organization/65546\"/>"));
-		assertThat(encoded, stringContainsInOrder("<Patient", "<id value=\"1333\"/>", "</Patient>"));
+		Patient parsed = ourCtx.newXmlParser().parseResource(Patient.class, enc);
+		List<IdDt> gotLabels = ResourceMetadataKeyEnum.PROFILES.get(parsed);
 		
-		encoded = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(patient);
-		ourLog.info(encoded);
-		assertThat(encoded, not(containsString("<contained>")));
-		assertThat(encoded, containsString("<reference value=\"Organization/65546\"/>"));
+		assertEquals(2,gotLabels.size());
+
+		IdDt label = (IdDt) gotLabels.get(0);
+		assertEquals("http://foo/Profile1", label.getValue());
+		label = (IdDt) gotLabels.get(1);
+		assertEquals("http://foo/Profile2", label.getValue());
 		
+		tagList = ResourceMetadataKeyEnum.TAG_LIST.get(parsed);
+		assertEquals(2, tagList.size());
 		
+		assertEquals(new Tag("scheme1", "term1", "label1"), tagList.get(0));
+		assertEquals(new Tag("scheme2", "term2", "label2"), tagList.get(1));
 	}
-
+	
 	@Test
-	public void testParseNarrative() throws Exception {
+	public void testEncodeAndParseMetaProfiles() {
+		Patient p = new Patient();
+		p.addName().addFamily("FAMILY");
+		
+		TagList tagList = new TagList();
+		tagList.addTag("scheme1", "term1", "label1");
+		tagList.addTag("scheme2", "term2", "label2");
+		ResourceMetadataKeyEnum.TAG_LIST.put(p, tagList);
+		
+		String enc = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(p);
+		ourLog.info(enc);
+		
 		//@formatter:off
-		String htmlNoNs = "<div>AAA<b>BBB</b>CCC</div>";
-		String htmlNs = htmlNoNs.replace("<div>", "<div xmlns=\"http://www.w3.org/1999/xhtml\">"); 
-		String res= "<Patient xmlns=\"http://hl7.org/fhir\">\n" + 
-				"   <id value=\"1333\"/>\n" + 
-				"   <text>\n" + 
-				"      " + htmlNs + "\n" +
-				"   </text>\n" + 
-				"</Patient>";
+		assertThat(enc, stringContainsInOrder("<Patient xmlns=\"http://hl7.org/fhir\">", 
+			"<meta>",
+			"<meta>",
+			"<tag>",
+			"<system value=\"scheme1\"/>",
+			"<code value=\"term1\"/>",
+			"<display value=\"label1\"/>",
+			"</tag>",
+			"<tag>",
+			"<system value=\"scheme2\"/>",
+			"<code value=\"term2\"/>",
+			"<display value=\"label2\"/>",
+			"</tag>",
+			"</meta>",
+			"</meta>",
+			"<name>",
+			"<family value=\"FAMILY\"/>",
+			"</name>", 
+			"</Patient>"));
 		//@formatter:on
 		
-		Patient p = ourCtx.newXmlParser().parseResource(Patient.class, res);
-		assertEquals(htmlNs, p.getText().getDiv().getValueAsString());
+		Patient parsed = ourCtx.newXmlParser().parseResource(Patient.class, enc);
+		List<IdDt> gotLabels = ResourceMetadataKeyEnum.PROFILES.get(parsed);
+		assertNull(gotLabels);
+
+		tagList = ResourceMetadataKeyEnum.TAG_LIST.get(parsed);
+		assertEquals(2, tagList.size());
+		
+		assertEquals(new Tag("scheme1", "term1", "label1"), tagList.get(0));
+		assertEquals(new Tag("scheme2", "term2", "label2"), tagList.get(1));
 	}
 
-	
+	@Test
+	public void testEncodeAndParseSecurityLabels() {
+		Patient p = new Patient();
+		p.addName().addFamily("FAMILY");
+		
+		List<BaseCodingDt> labels = new ArrayList<BaseCodingDt>();
+		labels.add(new CodingDt().setSystem("SYSTEM1").setCode("CODE1").setDisplay("DISPLAY1").setPrimary(true).setVersion("VERSION1"));
+		labels.add(new CodingDt().setSystem("SYSTEM2").setCode("CODE2").setDisplay("DISPLAY2").setPrimary(false).setVersion("VERSION2"));
+		
+		ResourceMetadataKeyEnum.SECURITY_LABELS.put(p, labels);
 
+		String enc = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(p);
+		ourLog.info(enc);
+		
+		//@formatter:off
+		assertThat(enc, stringContainsInOrder("<Patient xmlns=\"http://hl7.org/fhir\">", 
+			"<meta>", 
+			"<security>", 
+			"<system value=\"SYSTEM1\"/>", 
+			"<version value=\"VERSION1\"/>", 
+			"<code value=\"CODE1\"/>", 
+			"<display value=\"DISPLAY1\"/>", 
+			"<primary value=\"true\"/>", 
+			"</security>", 
+			"<security>", 
+			"<system value=\"SYSTEM2\"/>", 
+			"<version value=\"VERSION2\"/>", 
+			"<code value=\"CODE2\"/>", 
+			"<display value=\"DISPLAY2\"/>", 
+			"<primary value=\"false\"/>", 
+			"</security>",
+			"</meta>", 
+			"<name>", 
+			"<family value=\"FAMILY\"/>", 
+			"</name>", 
+			"</Patient>"));
+		//@formatter:on
+		
+		Patient parsed = ourCtx.newXmlParser().parseResource(Patient.class, enc);
+		List<BaseCodingDt> gotLabels = ResourceMetadataKeyEnum.SECURITY_LABELS.get(parsed);
+		
+		assertEquals(2,gotLabels.size());
 
+		CodingDt label = (CodingDt) gotLabels.get(0);
+		assertEquals("SYSTEM1", label.getSystem());
+		assertEquals("CODE1", label.getCode());
+		assertEquals("DISPLAY1", label.getDisplay());
+		assertEquals(true, label.getPrimary());
+		assertEquals("VERSION1", label.getVersion());
 
+		label = (CodingDt) gotLabels.get(1);
+		assertEquals("SYSTEM2", label.getSystem());
+		assertEquals("CODE2", label.getCode());
+		assertEquals("DISPLAY2", label.getDisplay());
+		assertEquals(false, label.getPrimary());
+		assertEquals("VERSION2", label.getVersion());
+	}
+	
 	/**
-	 * Thanks to Alexander Kley!
+	 * See #103
 	 */
 	@Test
-	public void testParseContainedBinaryResource() {
-		byte[] bin = new byte[] { 0, 1, 2, 3, 4 };
-		final Binary binary = new Binary();
-		binary.setContentType("PatientConsent").setContent(bin);
-		// binary.setId(UUID.randomUUID().toString());
-
-		ca.uhn.fhir.model.dstu2.resource.DocumentManifest manifest = new ca.uhn.fhir.model.dstu2.resource.DocumentManifest();
-		// manifest.setId(UUID.randomUUID().toString());
-		CodeableConceptDt cc = new CodeableConceptDt();
-		cc.addCoding().setSystem("mySystem").setCode("PatientDocument");
-		manifest.setType(cc);
-		manifest.setMasterIdentifier(new IdentifierDt().setSystem("mySystem").setValue(UUID.randomUUID().toString()));
-		manifest.addContent().setP(new ResourceReferenceDt(binary));
-		manifest.setStatus(DocumentReferenceStatusEnum.CURRENT);
+	public void testEncodeAndReEncodeContainedJson() {
+		Composition comp = new Composition();
+		comp.addSection().getContent().setResource(new AllergyIntolerance().setComment("Section0_Allergy0"));
+		comp.addSection().getContent().setResource(new AllergyIntolerance().setComment("Section1_Allergy0"));
+		comp.addSection().getContent().setResource(new AllergyIntolerance().setComment("Section2_Allergy0"));
+		
+		IParser parser = ourCtx.newJsonParser().setPrettyPrint(true);
+		
+		String string = parser.encodeResourceToString(comp);
+		ourLog.info(string);
 
-		String encoded = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(manifest);
-		ourLog.info(encoded);
-		assertThat(encoded, StringContainsInOrder.stringContainsInOrder(Arrays.asList("contained>", "<Binary", "</contained>")));
+		Composition parsed = parser.parseResource(Composition.class, string);
+		parsed.getSection().remove(0);
 
-		ca.uhn.fhir.model.dstu2.resource.DocumentManifest actual = ourCtx.newXmlParser().parseResource(ca.uhn.fhir.model.dstu2.resource.DocumentManifest.class, encoded);
-		assertEquals(1, actual.getContained().getContainedResources().size());
-		assertEquals(1, actual.getContent().size());
-		assertNotNull(((ResourceReferenceDt)actual.getContent().get(0).getP()).getResource());
+		string = parser.encodeResourceToString(parsed);
+		ourLog.info(string);
 
+		parsed = parser.parseResource(Composition.class, string);
+		assertEquals(2, parsed.getContained().getContainedResources().size());
 	}
-
+	
+	/**
+	 * See #103
+	 */
 	@Test
-	public void testEncodeAndParseContained() {
-		IParser xmlParser = ourCtx.newXmlParser().setPrettyPrint(true);
-
-		// Create an organization, note that the organization does not have an ID
-		Organization org = new Organization();
-		org.getNameElement().setValue("Contained Test Organization");
-
-		// Create a patient
-		Patient patient = new Patient();
-		patient.setId("Patient/1333");
-		patient.addIdentifier().setSystem("urn:mrns").setValue("253345");
+	public void testEncodeAndReEncodeContainedXml() {
+		Composition comp = new Composition();
+		comp.addSection().getContent().setResource(new AllergyIntolerance().setComment("Section0_Allergy0"));
+		comp.addSection().getContent().setResource(new AllergyIntolerance().setComment("Section1_Allergy0"));
+		comp.addSection().getContent().setResource(new AllergyIntolerance().setComment("Section2_Allergy0"));
+		
+		IParser parser = ourCtx.newXmlParser().setPrettyPrint(true);
+		
+		String string = parser.encodeResourceToString(comp);
+		ourLog.info(string);
 
-		// Put the organization as a reference in the patient resource
-		patient.getManagingOrganization().setResource(org);
+		Composition parsed = parser.parseResource(Composition.class, string);
+		parsed.getSection().remove(0);
 
-		String encoded = xmlParser.encodeResourceToString(patient);
-		ourLog.info(encoded);
-		assertThat(encoded, containsString("<contained>"));
-		assertThat(encoded, containsString("<reference value=\"#1\"/>"));
+		string = parser.encodeResourceToString(parsed);
+		ourLog.info(string);
 
-		// Create a bundle with just the patient resource
-		ca.uhn.fhir.model.dstu2.resource.Bundle b = new ca.uhn.fhir.model.dstu2.resource.Bundle();
-		b.addEntry().setResource(patient);
+		parsed = parser.parseResource(Composition.class, string);
+		assertEquals(2, parsed.getContained().getContainedResources().size());
+	}
 
-		// Encode the bundle
-		encoded = xmlParser.encodeResourceToString(b);
-		ourLog.info(encoded);
-		assertThat(encoded, stringContainsInOrder(Arrays.asList("<contained>", "<id value=\"1\"/>", "</contained>")));
-		assertThat(encoded, containsString("<reference value=\"#1\"/>"));
-		assertThat(encoded, stringContainsInOrder(Arrays.asList("<entry>", "</entry>")));
-		assertThat(encoded, not(stringContainsInOrder(Arrays.asList("<entry>", "</entry>", "<entry>"))));
-
-		// Re-parse the bundle
-		patient = (Patient) xmlParser.parseResource(xmlParser.encodeResourceToString(patient));
-		assertEquals("#1", patient.getManagingOrganization().getReference().getValue());
-
-		assertNotNull(patient.getManagingOrganization().getResource());
-		org = (Organization) patient.getManagingOrganization().getResource();
-		assertEquals("#1", org.getId().getValue());
-		assertEquals("Contained Test Organization", org.getName());
-
-		// And re-encode a second time
-		encoded = xmlParser.encodeResourceToString(patient);
-		ourLog.info(encoded);
-		assertThat(encoded, stringContainsInOrder(Arrays.asList("<contained>", "<Organization ", "<id value=\"1\"/>", "</Organization", "</contained>", "<reference value=\"#1\"/>")));
-		assertThat(encoded, not(stringContainsInOrder(Arrays.asList("<contained>", "<Org", "<contained>"))));
-		assertThat(encoded, containsString("<reference value=\"#1\"/>"));
-
-		// And re-encode once more, with the references cleared
-		patient.getContained().getContainedResources().clear();
-		patient.getManagingOrganization().setReference((String)null);
-		encoded = xmlParser.encodeResourceToString(patient);
-		ourLog.info(encoded);
-		assertThat(encoded, stringContainsInOrder(Arrays.asList("<contained>", "<Organization ", "<id value=\"1\"/>", "</Organization", "</contained>", "<reference value=\"#1\"/>")));
-		assertThat(encoded, not(stringContainsInOrder(Arrays.asList("<contained>", "<Org", "<contained>"))));
-		assertThat(encoded, containsString("<reference value=\"#1\"/>"));
-
-		// And re-encode once more, with the references cleared and a manually set local ID
-		patient.getContained().getContainedResources().clear();
-		patient.getManagingOrganization().setReference((String)null);
-		patient.getManagingOrganization().getResource().setId(("#333"));
-		encoded = xmlParser.encodeResourceToString(patient);
-		ourLog.info(encoded);
-		assertThat(encoded, stringContainsInOrder(Arrays.asList("<contained>", "<Organization ", "<id value=\"333\"/>", "</Organization", "</contained>", "<reference value=\"#333\"/>")));
-		assertThat(encoded, not(stringContainsInOrder(Arrays.asList("<contained>", "<Org", "<contained>"))));
-
-	}
-
-	
-	@Test
-	public void testEncodeContainedWithNarrativeIsSuppresed() throws Exception {
-		IParser parser = ourCtx.newXmlParser().setPrettyPrint(true);
-
-		// Create an organization, note that the organization does not have an ID
-		Organization org = new Organization();
-		org.getNameElement().setValue("Contained Test Organization");
-		org.getText().setDiv("<div>FOOBAR</div>");
-
-		// Create a patient
-		Patient patient = new Patient();
-		patient.setId("Patient/1333");
-		patient.addIdentifier().setSystem("urn:mrns").setValue("253345");
-		patient.getText().setDiv("<div>BARFOO</div>");
-		patient.getManagingOrganization().setResource(org);
-
-		String encoded = parser.encodeResourceToString(patient);
-		ourLog.info(encoded);
-		
-		assertThat(encoded, stringContainsInOrder("<Patient", "<text>", "<div xmlns=\"http://www.w3.org/1999/xhtml\">BARFOO</div>", "<contained>", "<Organization", "</Organization"));
-		assertThat(encoded, not(stringContainsInOrder("<Patient", "<text>", "<contained>", "<Organization", "<text", "</Organization")));
-		
-		assertThat(encoded, not(containsString("FOOBAR")));
-		assertThat(encoded, (containsString("BARFOO")));
-
-	}
-
-
-	/**
-	 * See #163
-	 */
-	@Test
-	public void testParseResourceType() {
-		IParser xmlParser = ourCtx.newXmlParser().setPrettyPrint(true);
-
-		// Patient
-		Patient patient = new Patient();
-		String patientId = UUID.randomUUID().toString();
-		patient.setId(new IdDt("Patient", patientId));
-		patient.addName().addGiven("John").addFamily("Smith");
-		patient.setGender(AdministrativeGenderEnum.MALE);
-		patient.setBirthDate(new DateDt("1987-04-16"));
-
-		// Bundle
-		ca.uhn.fhir.model.dstu2.resource.Bundle bundle = new ca.uhn.fhir.model.dstu2.resource.Bundle();
-		bundle.setType(BundleTypeEnum.COLLECTION);
-		bundle.addEntry().setResource(patient);
-
-		String bundleText = xmlParser.encodeResourceToString(bundle);
-		ourLog.info(bundleText);
-		
-		ca.uhn.fhir.model.dstu2.resource.Bundle reincarnatedBundle = xmlParser.parseResource (ca.uhn.fhir.model.dstu2.resource.Bundle.class, bundleText);
-		Patient reincarnatedPatient = reincarnatedBundle.getAllPopulatedChildElementsOfType(Patient.class).get(0); 
-		
-		assertEquals("Patient", patient.getId().getResourceType());
-		assertEquals("Patient", reincarnatedPatient.getId().getResourceType());
-	}
-	
-	/**
-	 * see #144 and #146
-	 */
-	@Test
-	public void testParseContained() {
-
-		FhirContext c = FhirContext.forDstu2();
-		IParser parser = c.newXmlParser().setPrettyPrint(true);
-
-		Observation o = new Observation();
-		o.getCode().setText("obs text");
-
-		Patient p = new Patient();
-		p.addName().addFamily("patient family");
-		o.getSubject().setResource(p);
-		
-		String enc = parser.encodeResourceToString(o);
-		ourLog.info(enc);
-		
-		//@formatter:off
-		assertThat(enc, stringContainsInOrder(
-			"<Observation xmlns=\"http://hl7.org/fhir\">",
-			"<contained>",
-			"<Patient xmlns=\"http://hl7.org/fhir\">",
-			"<id value=\"1\"/>",
-			"</contained>",
-			"<reference value=\"#1\"/>"
-			));
-		//@formatter:on
-		
-		o = parser.parseResource(Observation.class, enc);
-		assertEquals("obs text", o.getCode().getText());
-		
-		assertNotNull(o.getSubject().getResource());
-		p = (Patient) o.getSubject().getResource();
-		assertEquals("patient family", p.getNameFirstRep().getFamilyAsSingleString());
-	}
+	
+	@Test
+	public void testEncodeBinaryWithNoContentType() {
+		Binary b = new Binary();
+		b.setContent(new byte[] {1,2,3,4});
+		
+		String output = ourCtx.newXmlParser().encodeResourceToString(b);
+		ourLog.info(output);
+		
+		assertEquals("<Binary xmlns=\"http://hl7.org/fhir\"><content value=\"AQIDBA==\"/></Binary>", output);
+	}
 
 	/**
 	 * See #113
@@ -751,31 +600,31 @@ public class XmlParserDstu2Test {
 		//@formatter:off
 
 	}
+
 	
+
+
+
 	/**
 	 * See #113
 	 */
 	@Test
-	public void testEncodeContainedResourcesManualContainUsingNonLocalId() {
+	public void testEncodeContainedResourcesAutomatic() {
 		
 		MedicationPrescription medicationPrescript = new MedicationPrescription();
-		
-		String medId = "123";
+		String nameDisp = "MedRef";
 		CodeableConceptDt codeDt = new CodeableConceptDt("urn:sys", "code1");
-
+		
 		// Adding medication to Contained.
 		Medication medResource = new Medication();
+		// No ID set
 		medResource.setCode(codeDt);
-		medResource.setId(String.valueOf(medId)); // ID does not start with '#'
-		ArrayList<IResource> medResList = new ArrayList<IResource>();
-		medResList.add(medResource);
-		ContainedDt medContainedDt = new ContainedDt();
-		medContainedDt.setContainedResources(medResList);
-		medicationPrescript.setContained(medContainedDt);
 
 		// Medication reference. This should point to the contained resource.
-		ResourceReferenceDt medRefDt = new ResourceReferenceDt("#" + medId);
-		medRefDt.setDisplay("MedRef");
+		ResourceReferenceDt medRefDt = new ResourceReferenceDt();
+		medRefDt.setDisplay(nameDisp);
+		// Resource reference set, but no ID
+		medRefDt.setResource(medResource);
 		medicationPrescript.setMedication(medRefDt);
 		
 		IParser p = ourCtx.newXmlParser().setPrettyPrint(true);
@@ -787,7 +636,7 @@ public class XmlParserDstu2Test {
 			"<MedicationPrescription xmlns=\"http://hl7.org/fhir\">",
 			"<contained>", 
 			"<Medication xmlns=\"http://hl7.org/fhir\">", 
-			"<id value=\"123\"/>", 
+			"<id value=\"1\"/>", 
 			"<code>", 
 			"<coding>", 
 			"<system value=\"urn:sys\"/>", 
@@ -797,34 +646,37 @@ public class XmlParserDstu2Test {
 			"</Medication>", 
 			"</contained>", 
 			"<medication>", 
-			"<reference value=\"#123\"/>", 
+			"<reference value=\"#1\"/>", 
 			"<display value=\"MedRef\"/>", 
 			"</medication>", 
 			"</MedicationPrescription>"));
 		//@formatter:off
-
 	}
 
 	/**
 	 * See #113
 	 */
 	@Test
-	public void testEncodeContainedResourcesAutomatic() {
+	public void testEncodeContainedResourcesManualContainUsingNonLocalId() {
 		
 		MedicationPrescription medicationPrescript = new MedicationPrescription();
-		String nameDisp = "MedRef";
-		CodeableConceptDt codeDt = new CodeableConceptDt("urn:sys", "code1");
 		
+		String medId = "123";
+		CodeableConceptDt codeDt = new CodeableConceptDt("urn:sys", "code1");
+
 		// Adding medication to Contained.
 		Medication medResource = new Medication();
-		// No ID set
 		medResource.setCode(codeDt);
+		medResource.setId(String.valueOf(medId)); // ID does not start with '#'
+		ArrayList<IResource> medResList = new ArrayList<IResource>();
+		medResList.add(medResource);
+		ContainedDt medContainedDt = new ContainedDt();
+		medContainedDt.setContainedResources(medResList);
+		medicationPrescript.setContained(medContainedDt);
 
 		// Medication reference. This should point to the contained resource.
-		ResourceReferenceDt medRefDt = new ResourceReferenceDt();
-		medRefDt.setDisplay(nameDisp);
-		// Resource reference set, but no ID
-		medRefDt.setResource(medResource);
+		ResourceReferenceDt medRefDt = new ResourceReferenceDt("#" + medId);
+		medRefDt.setDisplay("MedRef");
 		medicationPrescript.setMedication(medRefDt);
 		
 		IParser p = ourCtx.newXmlParser().setPrettyPrint(true);
@@ -836,7 +688,7 @@ public class XmlParserDstu2Test {
 			"<MedicationPrescription xmlns=\"http://hl7.org/fhir\">",
 			"<contained>", 
 			"<Medication xmlns=\"http://hl7.org/fhir\">", 
-			"<id value=\"1\"/>", 
+			"<id value=\"123\"/>", 
 			"<code>", 
 			"<coding>", 
 			"<system value=\"urn:sys\"/>", 
@@ -846,317 +698,717 @@ public class XmlParserDstu2Test {
 			"</Medication>", 
 			"</contained>", 
 			"<medication>", 
-			"<reference value=\"#1\"/>", 
+			"<reference value=\"#123\"/>", 
 			"<display value=\"MedRef\"/>", 
 			"</medication>", 
 			"</MedicationPrescription>"));
 		//@formatter:off
+
 	}
 
+	
 	@Test
-	public void testEncodeAndParseSecurityLabels() {
-		Patient p = new Patient();
-		p.addName().addFamily("FAMILY");
-		
-		List<BaseCodingDt> labels = new ArrayList<BaseCodingDt>();
-		labels.add(new CodingDt().setSystem("SYSTEM1").setCode("CODE1").setDisplay("DISPLAY1").setPrimary(true).setVersion("VERSION1"));
-		labels.add(new CodingDt().setSystem("SYSTEM2").setCode("CODE2").setDisplay("DISPLAY2").setPrimary(false).setVersion("VERSION2"));
-		
-		ResourceMetadataKeyEnum.SECURITY_LABELS.put(p, labels);
+	public void testEncodeContainedWithNarrativeIsSuppresed() throws Exception {
+		IParser parser = ourCtx.newXmlParser().setPrettyPrint(true);
 
-		String enc = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(p);
-		ourLog.info(enc);
-		
-		//@formatter:off
-		assertThat(enc, stringContainsInOrder("<Patient xmlns=\"http://hl7.org/fhir\">", 
-			"<meta>", 
-			"<security>", 
-			"<system value=\"SYSTEM1\"/>", 
-			"<version value=\"VERSION1\"/>", 
-			"<code value=\"CODE1\"/>", 
-			"<display value=\"DISPLAY1\"/>", 
-			"<primary value=\"true\"/>", 
-			"</security>", 
-			"<security>", 
-			"<system value=\"SYSTEM2\"/>", 
-			"<version value=\"VERSION2\"/>", 
-			"<code value=\"CODE2\"/>", 
-			"<display value=\"DISPLAY2\"/>", 
-			"<primary value=\"false\"/>", 
-			"</security>",
-			"</meta>", 
-			"<name>", 
-			"<family value=\"FAMILY\"/>", 
-			"</name>", 
-			"</Patient>"));
-		//@formatter:on
+		// Create an organization, note that the organization does not have an ID
+		Organization org = new Organization();
+		org.getNameElement().setValue("Contained Test Organization");
+		org.getText().setDiv("<div>FOOBAR</div>");
+
+		// Create a patient
+		Patient patient = new Patient();
+		patient.setId("Patient/1333");
+		patient.addIdentifier().setSystem("urn:mrns").setValue("253345");
+		patient.getText().setDiv("<div>BARFOO</div>");
+		patient.getManagingOrganization().setResource(org);
+
+		String encoded = parser.encodeResourceToString(patient);
+		ourLog.info(encoded);
 		
-		Patient parsed = ourCtx.newXmlParser().parseResource(Patient.class, enc);
-		List<BaseCodingDt> gotLabels = ResourceMetadataKeyEnum.SECURITY_LABELS.get(parsed);
+		assertThat(encoded, stringContainsInOrder("<Patient", "<text>", "<div xmlns=\"http://www.w3.org/1999/xhtml\">BARFOO</div>", "<contained>", "<Organization", "</Organization"));
+		assertThat(encoded, not(stringContainsInOrder("<Patient", "<text>", "<contained>", "<Organization", "<text", "</Organization")));
 		
-		assertEquals(2,gotLabels.size());
+		assertThat(encoded, not(containsString("FOOBAR")));
+		assertThat(encoded, (containsString("BARFOO")));
 
-		CodingDt label = (CodingDt) gotLabels.get(0);
-		assertEquals("SYSTEM1", label.getSystem());
-		assertEquals("CODE1", label.getCode());
-		assertEquals("DISPLAY1", label.getDisplay());
-		assertEquals(true, label.getPrimary());
-		assertEquals("VERSION1", label.getVersion());
+	}
+
+
+	@Test
+	public void testEncodeExtensionWithResourceContent() {
+		IParser parser = ourCtx.newXmlParser();
+
+		Patient patient = new Patient();
+		patient.addAddress().setUse(AddressUseEnum.HOME);
+		patient.addUndeclaredExtension(false, "urn:foo", new ResourceReferenceDt("Organization/123"));
+
+		String val = parser.encodeResourceToString(patient);
+		ourLog.info(val);
+		assertThat(val, StringContains.containsString("<extension url=\"urn:foo\"><valueReference><reference value=\"Organization/123\"/></valueReference></extension>"));
+
+		Patient actual = parser.parseResource(Patient.class, val);
+		assertEquals(AddressUseEnum.HOME.getCode(), patient.getAddress().get(0).getUse());
+		List<ExtensionDt> ext = actual.getUndeclaredExtensions();
+		assertEquals(1, ext.size());
+		ResourceReferenceDt ref = (ResourceReferenceDt) ext.get(0).getValue();
+		assertEquals("Organization/123", ref.getReference().getValue());
 
-		label = (CodingDt) gotLabels.get(1);
-		assertEquals("SYSTEM2", label.getSystem());
-		assertEquals("CODE2", label.getCode());
-		assertEquals("DISPLAY2", label.getDisplay());
-		assertEquals(false, label.getPrimary());
-		assertEquals("VERSION2", label.getVersion());
+	}
+	
+	@Test
+	public void testEncodeNonContained() {
+		// Create an organization
+		Organization org = new Organization();
+		org.setId("Organization/65546");
+		org.getNameElement().setValue("Contained Test Organization");
+
+		// Create a patient
+		Patient patient = new Patient();
+		patient.setId("Patient/1333");
+		patient.addIdentifier().setSystem("urn:mrns").setValue("253345");
+		patient.getManagingOrganization().setResource(org);
+		
+		// Create a list containing both resources. In a server method, you might just
+		// return this list, but here we will create a bundle to encode.
+		List<IBaseResource> resources = new ArrayList<IBaseResource>();
+		resources.add(org);
+		resources.add(patient);		
+		
+		// Create a bundle with both
+		ca.uhn.fhir.model.dstu2.resource.Bundle b = new ca.uhn.fhir.model.dstu2.resource.Bundle();
+		b.addEntry().setResource(org);
+		b.addEntry().setResource(patient);
+		
+		// Encode the buntdle
+		String encoded = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(b);
+		ourLog.info(encoded);
+		assertThat(encoded, not(containsString("<contained>")));
+		assertThat(encoded, stringContainsInOrder("<Organization", "<id value=\"65546\"/>", "</Organization>"));
+		assertThat(encoded, containsString("<reference value=\"Organization/65546\"/>"));
+		assertThat(encoded, stringContainsInOrder("<Patient", "<id value=\"1333\"/>", "</Patient>"));
+		
+		encoded = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(patient);
+		ourLog.info(encoded);
+		assertThat(encoded, not(containsString("<contained>")));
+		assertThat(encoded, containsString("<reference value=\"Organization/65546\"/>"));
+		
+		
 	}
 
 	@Test
-	public void testEncodeAndParseMetaProfileAndTags() {
+	public void testMoreExtensions() throws Exception {
+
+		Patient patient = new Patient();
+		patient.addIdentifier().setUse(IdentifierUseEnum.OFFICIAL).setSystem("urn:example").setValue("7000135");
+
+		ExtensionDt ext = new ExtensionDt();
+		ext.setUrl("http://example.com/extensions#someext");
+		ext.setValue(new DateTimeDt("2011-01-02T11:13:15"));
+
+		// Add the extension to the resource
+		patient.addUndeclaredExtension(ext);
+		// END SNIPPET: resourceExtension
+
+		// START SNIPPET: resourceStringExtension
+		HumanNameDt name = patient.addName();
+		name.addFamily("Shmoe");
+		StringDt given = name.addGiven();
+		given.setValue("Joe");
+		ExtensionDt ext2 = new ExtensionDt().setUrl("http://examples.com#givenext").setValue(new StringDt("given"));
+		given.addUndeclaredExtension(ext2);
+
+		StringDt given2 = name.addGiven();
+		given2.setValue("Shmoe");
+		ExtensionDt given2ext = new ExtensionDt().setUrl("http://examples.com#givenext_parent");
+		given2.addUndeclaredExtension(given2ext);
+		ExtensionDt givenExtChild = new ExtensionDt();
+		givenExtChild.setUrl("http://examples.com#givenext_child").setValue(new StringDt("CHILD"));
+		given2ext.addUndeclaredExtension(givenExtChild);
+		// END SNIPPET: resourceStringExtension
+
+		// START SNIPPET: subExtension
+		ExtensionDt parent = new ExtensionDt().setUrl("http://example.com#parent");
+		patient.addUndeclaredExtension(parent);
+
+		ExtensionDt child1 = new ExtensionDt().setUrl("http://example.com#child").setValue(new StringDt("value1"));
+		parent.addUndeclaredExtension(child1);
+
+		ExtensionDt child2 = new ExtensionDt().setUrl("http://example.com#child").setValue(new StringDt("value1"));
+		parent.addUndeclaredExtension(child2);
+		// END SNIPPET: subExtension
+
+		String output = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(patient);
+		ourLog.info(output);
+
+		String enc = ourCtx.newXmlParser().encodeResourceToString(patient);
+		assertThat(enc, containsString("<Patient xmlns=\"http://hl7.org/fhir\"><extension url=\"http://example.com/extensions#someext\"><valueDateTime value=\"2011-01-02T11:13:15\"/></extension>"));
+		assertThat(
+				enc,
+				containsString("<extension url=\"http://example.com#parent\"><extension url=\"http://example.com#child\"><valueString value=\"value1\"/></extension><extension url=\"http://example.com#child\"><valueString value=\"value1\"/></extension></extension>"));
+		assertThat(enc, containsString("<given value=\"Joe\"><extension url=\"http://examples.com#givenext\"><valueString value=\"given\"/></extension></given>"));
+		assertThat(enc, containsString("<given value=\"Shmoe\"><extension url=\"http://examples.com#givenext_parent\"><extension url=\"http://examples.com#givenext_child\"><valueString value=\"CHILD\"/></extension></extension></given>"));
+	}
+	
+	@Test
+	public void testOmitResourceId() {
 		Patient p = new Patient();
-		p.addName().addFamily("FAMILY");
+		p.setId("123");
+		p.addName().addFamily("ABC");
 		
-		List<IdDt> profiles = new ArrayList<IdDt>();
-		profiles.add(new IdDt("http://foo/Profile1"));
-		profiles.add(new IdDt("http://foo/Profile2"));
-		ResourceMetadataKeyEnum.PROFILES.put(p, profiles);
+		assertThat(ourCtx.newXmlParser().encodeResourceToString(p), stringContainsInOrder("123", "ABC"));
+		assertThat(ourCtx.newXmlParser().setOmitResourceId(true).encodeResourceToString(p), containsString("ABC"));
+		assertThat(ourCtx.newXmlParser().setOmitResourceId(true).encodeResourceToString(p), not(containsString("123")));
+	}
 
-		TagList tagList = new TagList();
-		tagList.addTag("scheme1", "term1", "label1");
-		tagList.addTag("scheme2", "term2", "label2");
-		ResourceMetadataKeyEnum.TAG_LIST.put(p, tagList);
+	@Test
+	public void testParseAndEncodeBundle() throws Exception {
+		String content = IOUtils.toString(XmlParserDstu2Test.class.getResourceAsStream("/bundle-example.xml"));
+
+		Bundle parsed = ourCtx.newXmlParser().parseBundle(content);
+		assertEquals("http://example.com/base/Bundle/example/_history/1", parsed.getId().getValue());
+		assertEquals("1", parsed.getResourceMetadata().get(ResourceMetadataKeyEnum.VERSION));
+		assertEquals("1", parsed.getId().getVersionIdPart());
+		assertEquals(new InstantDt("2014-08-18T01:43:30Z"), parsed.getResourceMetadata().get(ResourceMetadataKeyEnum.UPDATED));
+		assertEquals("searchset", parsed.getType().getValue());
+		assertEquals(3, parsed.getTotalResults().getValue().intValue());
+		assertEquals("http://example.com/base", parsed.getLinkBase().getValue());
+		assertEquals("https://example.com/base/MedicationPrescription?patient=347&searchId=ff15fd40-ff71-4b48-b366-09c706bed9d0&page=2", parsed.getLinkNext().getValue());
+		assertEquals("https://example.com/base/MedicationPrescription?patient=347&_include=MedicationPrescription.medication", parsed.getLinkSelf().getValue());
+
+		assertEquals(2, parsed.getEntries().size());
+		assertEquals("http://foo?search", parsed.getEntries().get(0).getLinkSearch().getValue());
+
+		assertEquals("http://example.com/base/MedicationPrescription/3123/_history/1", parsed.getEntries().get(0).getLinkAlternate().getValue());
+		MedicationPrescription p = (MedicationPrescription) parsed.getEntries().get(0).getResource();
+		assertEquals("Patient/347", p.getPatient().getReference().getValue());
+		assertEquals("2014-08-16T05:31:17Z", ResourceMetadataKeyEnum.UPDATED.get(p).getValueAsString());
+		assertEquals("http://example.com/base/MedicationPrescription/3123/_history/1", p.getId().getValue());
+
+		Medication m = (Medication) parsed.getEntries().get(1).getResource();
+		assertEquals("http://example.com/base/Medication/example", m.getId().getValue());
+		assertSame(p.getMedication().getResource(), m);
+
+		String reencoded = ourCtx.newXmlParser().setPrettyPrint(true).encodeBundleToString(parsed);
+		ourLog.info(reencoded);
+
+		Diff d = new Diff(new StringReader(content), new StringReader(reencoded));
+		assertTrue(d.toString(), d.identical());
+
+	}
+
+	@Test
+	public void testParseAndEncodeBundleNewStyle() throws Exception {
+		String content = IOUtils.toString(XmlParserDstu2Test.class.getResourceAsStream("/bundle-example.xml"));
+
+		IParser newXmlParser = ourCtx.newXmlParser();
+		ca.uhn.fhir.model.dstu2.resource.Bundle parsed = newXmlParser.parseResource(ca.uhn.fhir.model.dstu2.resource.Bundle.class, content);
+		assertEquals("http://example.com/base/Bundle/example/_history/1", parsed.getId().getValue());
+		assertEquals("1", parsed.getResourceMetadata().get(ResourceMetadataKeyEnum.VERSION));
+		assertEquals(new InstantDt("2014-08-18T01:43:30Z"), parsed.getResourceMetadata().get(ResourceMetadataKeyEnum.UPDATED));
+		assertEquals("searchset", parsed.getType());
+		assertEquals(3, parsed.getTotal().intValue());
+		assertEquals("http://example.com/base", parsed.getBaseElement().getValueAsString());
+		assertEquals("https://example.com/base/MedicationPrescription?patient=347&searchId=ff15fd40-ff71-4b48-b366-09c706bed9d0&page=2", parsed.getLink().get(0).getUrlElement().getValueAsString());
+		assertEquals("https://example.com/base/MedicationPrescription?patient=347&_include=MedicationPrescription.medication", parsed.getLink().get(1).getUrlElement().getValueAsString());
+
+		assertEquals(2, parsed.getEntry().size());
+		assertEquals("alternate", parsed.getEntry().get(0).getLink().get(0).getRelation());
+		assertEquals("http://example.com/base/MedicationPrescription/3123/_history/1", parsed.getEntry().get(0).getLink().get(0).getUrl());
+		assertEquals("http://foo?search", parsed.getEntry().get(0).getTransaction().getUrlElement().getValueAsString());
+
+		MedicationPrescription p = (MedicationPrescription) parsed.getEntry().get(0).getResource();
+		assertEquals("Patient/347", p.getPatient().getReference().getValue());
+		assertEquals("2014-08-16T05:31:17Z", ResourceMetadataKeyEnum.UPDATED.get(p).getValueAsString());
+		assertEquals("http://example.com/base/MedicationPrescription/3123/_history/1", p.getId().getValue());
+//		assertEquals("3123", p.getId().getValue());
+
+		Medication m = (Medication) parsed.getEntry().get(1).getResource();
+		assertEquals("http://example.com/base/Medication/example", m.getId().getValue());
+		assertSame(p.getMedication().getResource(), m);
+
+		String reencoded = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(parsed);
+		ourLog.info(reencoded);
+
+		Diff d = new Diff(new StringReader(content), new StringReader(reencoded));
+		assertTrue(d.toString(), d.identical());
+
+	}
+
+	@Test
+	public void testParseAndEncodeExtensionOnResourceReference() {
+		//@formatter:off
+		String input = "<DataElement>" + 
+				"<id value=\"gender\"/>"+ 
+				"<contained>"+ 
+				"<ValueSet>"+ 
+				"<id value=\"2179414\"/>"+ 
+				"<url value=\"2179414\"/>"+ 
+				"<version value=\"1.0\"/>"+ 
+				"<name value=\"Gender Code\"/>"+ 
+				"<description value=\"All codes representing the gender of a person.\"/>"+ 
+				"<status value=\"active\"/>"+ 
+				"<compose>"+ 
+				"<include>"+ 
+				"<system value=\"http://ncit.nci.nih.gov\"/>"+ 
+				"<concept>"+ 
+				"<code value=\"C17998\"/>"+ 
+				"<display value=\"Unknown\"/>"+ 
+				"</concept>"+ 
+				"<concept>"+ 
+				"<code value=\"C20197\"/>"+ 
+				"<display value=\"Male\"/>"+ 
+				"</concept>"+ 
+				"<concept>"+ 
+				"<code value=\"C16576\"/>"+ 
+				"<display value=\"Female\"/>"+ 
+				"</concept>"+ 
+				"<concept>"+ 
+				"<code value=\"C38046\"/>"+ 
+				"<display value=\"Not specified\"/>"+ 
+				"</concept>"+ 
+				"</include>"+ 
+				"</compose>"+ 
+				"</ValueSet>"+ 
+				"</contained>"+ 
+				"<contained>"+ 
+				"<ValueSet>"+ 
+				"<id value=\"2179414-permitted\"/>"+ 
+				"<status value=\"active\"/>"+ 
+				"<define>"+ 
+				"<system value=\"http://example.org/fhir/2179414\"/>"+ 
+				"<caseSensitive value=\"true\"/>"+ 
+				"<concept>"+ 
+				"<code value=\"0\"/>"+ 
+				"</concept>"+ 
+				"<concept>"+ 
+				"<code value=\"1\"/>"+ 
+				"</concept>"+ 
+				"<concept>"+ 
+				"<code value=\"2\"/>"+ 
+				"</concept>"+ 
+				"<concept>"+ 
+				"<code value=\"3\"/>"+ 
+				"</concept>"+ 
+				"</define>"+ 
+				"</ValueSet>"+ 
+				"</contained>"+ 
+				"<contained>"+ 
+				"<ConceptMap>"+ 
+				"<id value=\"2179414-cm\"/>"+ 
+				"<status value=\"active\"/>"+ 
+				"<sourceReference>"+ 
+				"<reference value=\"#2179414\"/>"+ 
+				"</sourceReference>"+ 
+				"<targetReference>"+ 
+				"<reference value=\"#2179414-permitted\"/>"+ 
+				"</targetReference>"+ 
+				"<element>"+ 
+				"<code value=\"C17998\"/>"+ 
+				"<map>"+ 
+				"<code value=\"0\"/>"+ 
+				"<equivalence value=\"equal\"/>"+ 
+				"</map>"+ 
+				"</element>"+ 
+				"<element>"+ 
+				"<code value=\"C20197\"/>"+ 
+				"<map>"+ 
+				"<code value=\"1\"/>"+ 
+				"<equivalence value=\"equal\"/>"+ 
+				"</map>"+ 
+				"</element>"+ 
+				"<element>"+ 
+				"<code value=\"C16576\"/>"+ 
+				"<map>"+ 
+				"<code value=\"2\"/>"+ 
+				"<equivalence value=\"equal\"/>"+ 
+				"</map>"+ 
+				"</element>"+ 
+				"<element>"+ 
+				"<code value=\"C38046\"/>"+ 
+				"<map>"+ 
+				"<code value=\"3\"/>"+ 
+				"<equivalence value=\"equal\"/>"+ 
+				"</map>"+ 
+				"</element>"+ 
+				"</ConceptMap>"+ 
+				"</contained>"+ 
+				"<identifier>"+ 
+				"<value value=\"2179650\"/>"+ 
+				"</identifier>"+ 
+				"<version value=\"1.0\"/>"+ 
+				"<name value=\"Gender Code\"/>"+ 
+				"<useContext>"+ 
+				"<coding>"+ 
+				"<system value=\"http://example.org/FBPP\"/>"+ 
+				"<display value=\"FBPP Pooled Database\"/>"+ 
+				"</coding>"+ 
+				"<coding>"+ 
+				"<system value=\"http://example.org/PhenX\"/>"+ 
+				"<display value=\"Demographics\"/>"+ 
+				"</coding>"+ 
+				"<coding>"+ 
+				"<system value=\"http://example.org/EligibilityCriteria\"/>"+ 
+				"<display value=\"Pt. Administrative\"/>"+ 
+				"</coding>"+ 
+				"<coding>"+ 
+				"<system value=\"http://example.org/UAMSClinicalResearch\"/>"+ 
+				"<display value=\"UAMS New CDEs\"/>"+ 
+				"</coding>"+ 
+				"<coding>"+ 
+				"<system value=\"http://example.org/PhenX\"/>"+ 
+				"<display value=\"Substance Abuse and \"/>"+ 
+				"</coding>"+ 
+				"<coding>"+ 
+				"<system value=\"http://example.org/Category\"/>"+ 
+				"<display value=\"CSAERS Adverse Event\"/>"+ 
+				"</coding>"+ 
+				"<coding>"+ 
+				"<system value=\"http://example.org/PhenX\"/>"+ 
+				"<display value=\"Core: Tier 1\"/>"+ 
+				"</coding>"+ 
+				"<coding>"+ 
+				"<system value=\"http://example.org/Category\"/>"+ 
+				"<display value=\"Case Report Forms\"/>"+ 
+				"</coding>"+ 
+				"<coding>"+ 
+				"<system value=\"http://example.org/Category\"/>"+ 
+				"<display value=\"CSAERS Review Set\"/>"+ 
+				"</coding>"+ 
+				"<coding>"+ 
+				"<system value=\"http://example.org/Demonstration%20Applications\"/>"+ 
+				"<display value=\"CIAF\"/>"+ 
+				"</coding>"+ 
+				"<coding>"+ 
+				"<system value=\"http://example.org/NIDA%20CTN%20Usage\"/>"+ 
+				"<display value=\"Clinical Research\"/>"+ 
+				"</coding>"+ 
+				"<coding>"+ 
+				"<system value=\"http://example.org/NIDA%20CTN%20Usage\"/>"+ 
+				"<display value=\"Electronic Health Re\"/>"+ 
+				"</coding>"+ 
+				"<coding>"+ 
+				"<system value=\"http://example.org/Condition\"/>"+ 
+				"<display value=\"Barretts Esophagus\"/>"+ 
+				"</coding>"+ 
+				"<coding>"+ 
+				"<system value=\"http://example.org/Condition\"/>"+ 
+				"<display value=\"Bladder Cancer\"/>"+ 
+				"</coding>"+ 
+				"<coding>"+ 
+				"<system value=\"http://example.org/Condition\"/>"+ 
+				"<display value=\"Oral Leukoplakia\"/>"+ 
+				"</coding>"+ 
+				"<coding>"+ 
+				"<system value=\"http://example.org/Condition\"/>"+ 
+				"<display value=\"Sulindac for Breast\"/>"+ 
+				"</coding>"+ 
+				"</useContext>"+ 
+				"<status value=\"active\"/>"+ 
+				"<publisher value=\"DCP\"/>"+ 
+				"<element>"+ 
+				"<extension url=\"http://hl7.org/fhir/StructureDefinition/minLength\">"+ 
+				"<valueInteger value=\"1\"/>"+ 
+				"</extension>"+ 
+				"<extension url=\"http://hl7.org/fhir/StructureDefinition/elementdefinition-question\">"+ 
+				"<valueString value=\"Gender\"/>"+ 
+				"</extension>"+ 
+				"<path value=\"Gender\"/>"+ 
+				"<definition value=\"The code representing the gender of a person.\"/>"+ 
+				"<type>"+ 
+				"<code value=\"CodeableConcept\"/>"+ 
+				"</type>"+ 
+				"<maxLength value=\"13\"/>"+ 
+				"<binding>"+ 
+				"<name value=\"Gender\"/>"+ 
+				"<strength value=\"required\"/>"+ 
+				"<valueSetReference>"+ 
+				"<extension url=\"http://hl7.org/fhir/StructureDefinition/11179-permitted-value-valueset\">"+ 
+				"<valueReference>"+ 
+				"<reference value=\"#2179414-permitted\"/>"+ 
+				"</valueReference>"+ 
+				"</extension>"+ 
+				"<extension url=\"http://hl7.org/fhir/StructureDefinition/11179-permitted-value-conceptmap\">"+ 
+				"<valueReference>"+ 
+				"<reference value=\"#2179414-cm\"/>"+ 
+				"</valueReference>"+ 
+				"</extension>"+ 
+				"<reference value=\"#2179414\"/>"+ 
+				"</valueSetReference>"+ 
+				"</binding>"+ 
+				"</element>"+ 
+				"</DataElement>";
+		//@formatter:on
+		DataElement de = ourCtx.newXmlParser().parseResource(DataElement.class, input);
+		String output = ourCtx.newXmlParser().encodeResourceToString(de).replace(" xmlns=\"http://hl7.org/fhir\"", "");
 		
-		String enc = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(p);
-		ourLog.info(enc);
+		ElementDefinitionDt elem = de.getElement().get(0);
+		Binding b = elem.getBinding();
+		assertEquals("Gender", b.getName());
 		
-		//@formatter:off
-		assertThat(enc, stringContainsInOrder("<Patient xmlns=\"http://hl7.org/fhir\">", 
-			"<meta>",
-			"<meta>",
-			"<profile value=\"http://foo/Profile1\"/>",
-			"<profile value=\"http://foo/Profile2\"/>",
-			"<tag>",
-			"<system value=\"scheme1\"/>",
-			"<code value=\"term1\"/>",
-			"<display value=\"label1\"/>",
-			"</tag>",
-			"<tag>",
-			"<system value=\"scheme2\"/>",
-			"<code value=\"term2\"/>",
-			"<display value=\"label2\"/>",
-			"</tag>",
-			"</meta>",
-			"</meta>",
-			"<name>",
-			"<family value=\"FAMILY\"/>",
-			"</name>", 
-			"</Patient>"));
-		//@formatter:on
+		ResourceReferenceDt ref = (ResourceReferenceDt) b.getValueSet();
+		assertEquals("#2179414", ref.getReference().getValue());
 		
-		Patient parsed = ourCtx.newXmlParser().parseResource(Patient.class, enc);
-		List<IdDt> gotLabels = ResourceMetadataKeyEnum.PROFILES.get(parsed);
+		assertEquals(2, ref.getUndeclaredExtensions().size());
+		ExtensionDt ext = ref.getUndeclaredExtensions().get(0);
+		assertEquals("http://hl7.org/fhir/StructureDefinition/11179-permitted-value-valueset", ext.getUrl());
+		assertEquals(ResourceReferenceDt.class, ext.getValue().getClass());
+		assertEquals("#2179414-permitted", ((ResourceReferenceDt)ext.getValue()).getReference().getValue());
 		
-		assertEquals(2,gotLabels.size());
-
-		IdDt label = (IdDt) gotLabels.get(0);
-		assertEquals("http://foo/Profile1", label.getValue());
-		label = (IdDt) gotLabels.get(1);
-		assertEquals("http://foo/Profile2", label.getValue());
+		ourLog.info(ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(de));
 		
-		tagList = ResourceMetadataKeyEnum.TAG_LIST.get(parsed);
-		assertEquals(2, tagList.size());
+		assertThat(output, containsString("http://hl7.org/fhir/StructureDefinition/11179-permitted-value-valueset"));
 		
-		assertEquals(new Tag("scheme1", "term1", "label1"), tagList.get(0));
-		assertEquals(new Tag("scheme2", "term2", "label2"), tagList.get(1));
+		ourLog.info("Expected: {}", input);
+		ourLog.info("Actual  : {}", output);
+		assertEquals(input, output);
 	}
 	
 	@Test
-	public void testEncodeAndParseMetaProfiles() {
-		Patient p = new Patient();
-		p.addName().addFamily("FAMILY");
-		
-		TagList tagList = new TagList();
-		tagList.addTag("scheme1", "term1", "label1");
-		tagList.addTag("scheme2", "term2", "label2");
-		ResourceMetadataKeyEnum.TAG_LIST.put(p, tagList);
-		
-		String enc = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(p);
-		ourLog.info(enc);
-		
+	public void testParseBundleNewWithPlaceholderIds() {
 		//@formatter:off
-		assertThat(enc, stringContainsInOrder("<Patient xmlns=\"http://hl7.org/fhir\">", 
-			"<meta>",
-			"<meta>",
-			"<tag>",
-			"<system value=\"scheme1\"/>",
-			"<code value=\"term1\"/>",
-			"<display value=\"label1\"/>",
-			"</tag>",
-			"<tag>",
-			"<system value=\"scheme2\"/>",
-			"<code value=\"term2\"/>",
-			"<display value=\"label2\"/>",
-			"</tag>",
-			"</meta>",
-			"</meta>",
-			"<name>",
-			"<family value=\"FAMILY\"/>",
-			"</name>", 
-			"</Patient>"));
-		//@formatter:on
+		String input = "<Bundle xmlns=\"http://hl7.org/fhir\">\n" + 
+				"    <id value=\"ringholm1430996763590912\"/>\n" + 
+				"    <entry>\n" +
+				"        <base value=\"urn:oid:\"/>\n" +
+				"        <resource>\n" + 
+				"            <Provenance>\n" + 
+				"                <id value=\"0.1.2.3\"/>\n" + 
+				"            </Provenance>\n" + 
+				"        </resource>\n" + 
+				"    </entry>\n" + 
+				"</Bundle>\n";
+		//@formatter:on		
+		
+		ca.uhn.fhir.model.dstu2.resource.Bundle parsed = ourCtx.newXmlParser().parseResource(ca.uhn.fhir.model.dstu2.resource.Bundle.class, input);
+		assertEquals("urn:oid:0.1.2.3", parsed.getEntry().get(0).getResource().getId().getValue());
 		
-		Patient parsed = ourCtx.newXmlParser().parseResource(Patient.class, enc);
-		List<IdDt> gotLabels = ResourceMetadataKeyEnum.PROFILES.get(parsed);
-		assertNull(gotLabels);
-
-		tagList = ResourceMetadataKeyEnum.TAG_LIST.get(parsed);
-		assertEquals(2, tagList.size());
+		//@formatter:off
+		input = "<Bundle xmlns=\"http://hl7.org/fhir\">\n" + 
+				"    <id value=\"ringholm1430996763590912\"/>\n" + 
+				"    <entry>\n" +
+				"        <base value=\"urn:oid\"/>\n" + // no trailing :, invalid but we'll be nice
+				"        <resource>\n" + 
+				"            <Provenance>\n" + 
+				"                <id value=\"0.1.2.3\"/>\n" + 
+				"            </Provenance>\n" + 
+				"        </resource>\n" + 
+				"    </entry>\n" + 
+				"</Bundle>\n";
+		//@formatter:on		
+
+		parsed = ourCtx.newXmlParser().parseResource(ca.uhn.fhir.model.dstu2.resource.Bundle.class, input);
+		assertEquals("urn:oid:0.1.2.3", parsed.getEntry().get(0).getResource().getId().getValue());
 		
-		assertEquals(new Tag("scheme1", "term1", "label1"), tagList.get(0));
-		assertEquals(new Tag("scheme2", "term2", "label2"), tagList.get(1));
 	}
 
 	@Test
-	public void testDuration() {
-		Encounter enc = new Encounter();
-		DurationDt duration = new DurationDt();
-		duration.setUnits("day").setValue(123L);
-		enc.setLength(duration);
-		
-		String str = ourCtx.newXmlParser().encodeResourceToString(enc);
-		ourLog.info(str);
-		
-		assertThat(str, not(containsString("meta")));
-		assertThat(str, containsString("<length><value value=\"123\"/><units value=\"day\"/></length>"));
+	public void testParseBundleNewWithPlaceholderIdsInBase1() {
+		//@formatter:off
+		String input = "<Bundle xmlns=\"http://hl7.org/fhir\">\n" + 
+				"    <id value=\"ringholm1430996763590912\"/>\n" + 
+				"    <base value=\"urn:uuid:\"/>\n" +
+				"    <entry>\n" +
+				"        <base value=\"urn:oid:\"/>\n" +
+				"        <resource>\n" + 
+				"            <Provenance>\n" + 
+				"                <id value=\"0.1.2.3\"/>\n" + 
+				"            </Provenance>\n" + 
+				"        </resource>\n" + 
+				"    </entry>\n" + 
+				"</Bundle>\n";
+		//@formatter:on		
+		
+		ca.uhn.fhir.model.dstu2.resource.Bundle parsed = ourCtx.newXmlParser().parseResource(ca.uhn.fhir.model.dstu2.resource.Bundle.class, input);
+		assertEquals("urn:oid:0.1.2.3", parsed.getEntry().get(0).getResource().getId().getValue());
 	}
 	
 	@Test
-	public void testParseBundleWithBinary() {
-		// TODO: implement this test, make sure we handle ID and meta correctly in Binary
-	}
-
-	@Test
-	public void testParseAndEncodeBundle() throws Exception {
-		String content = IOUtils.toString(XmlParserDstu2Test.class.getResourceAsStream("/bundle-example.xml"));
-
-		Bundle parsed = ourCtx.newXmlParser().parseBundle(content);
-		assertEquals("http://example.com/base/Bundle/example/_history/1", parsed.getId().getValue());
-		assertEquals("1", parsed.getResourceMetadata().get(ResourceMetadataKeyEnum.VERSION));
-		assertEquals("1", parsed.getId().getVersionIdPart());
-		assertEquals(new InstantDt("2014-08-18T01:43:30Z"), parsed.getResourceMetadata().get(ResourceMetadataKeyEnum.UPDATED));
-		assertEquals("searchset", parsed.getType().getValue());
-		assertEquals(3, parsed.getTotalResults().getValue().intValue());
-		assertEquals("http://example.com/base", parsed.getLinkBase().getValue());
-		assertEquals("https://example.com/base/MedicationPrescription?patient=347&searchId=ff15fd40-ff71-4b48-b366-09c706bed9d0&page=2", parsed.getLinkNext().getValue());
-		assertEquals("https://example.com/base/MedicationPrescription?patient=347&_include=MedicationPrescription.medication", parsed.getLinkSelf().getValue());
-
-		assertEquals(2, parsed.getEntries().size());
-		assertEquals("http://foo?search", parsed.getEntries().get(0).getLinkSearch().getValue());
-
-		assertEquals("http://example.com/base/MedicationPrescription/3123/_history/1", parsed.getEntries().get(0).getLinkAlternate().getValue());
-		MedicationPrescription p = (MedicationPrescription) parsed.getEntries().get(0).getResource();
-		assertEquals("Patient/347", p.getPatient().getReference().getValue());
-		assertEquals("2014-08-16T05:31:17Z", ResourceMetadataKeyEnum.UPDATED.get(p).getValueAsString());
-		assertEquals("http://example.com/base/MedicationPrescription/3123/_history/1", p.getId().getValue());
-
-		Medication m = (Medication) parsed.getEntries().get(1).getResource();
-		assertEquals("http://example.com/base/Medication/example", m.getId().getValue());
-		assertSame(p.getMedication().getResource(), m);
-
-		String reencoded = ourCtx.newXmlParser().setPrettyPrint(true).encodeBundleToString(parsed);
-		ourLog.info(reencoded);
-
-		Diff d = new Diff(new StringReader(content), new StringReader(reencoded));
-		assertTrue(d.toString(), d.identical());
-
-	}
-
-	@Test
-	public void testParseAndEncodeBundleNewStyle() throws Exception {
-		String content = IOUtils.toString(XmlParserDstu2Test.class.getResourceAsStream("/bundle-example.xml"));
-
-		IParser newXmlParser = ourCtx.newXmlParser();
-		ca.uhn.fhir.model.dstu2.resource.Bundle parsed = newXmlParser.parseResource(ca.uhn.fhir.model.dstu2.resource.Bundle.class, content);
-		assertEquals("http://example.com/base/Bundle/example/_history/1", parsed.getId().getValue());
-		assertEquals("1", parsed.getResourceMetadata().get(ResourceMetadataKeyEnum.VERSION));
-		assertEquals(new InstantDt("2014-08-18T01:43:30Z"), parsed.getResourceMetadata().get(ResourceMetadataKeyEnum.UPDATED));
-		assertEquals("searchset", parsed.getType());
-		assertEquals(3, parsed.getTotal().intValue());
-		assertEquals("http://example.com/base", parsed.getBaseElement().getValueAsString());
-		assertEquals("https://example.com/base/MedicationPrescription?patient=347&searchId=ff15fd40-ff71-4b48-b366-09c706bed9d0&page=2", parsed.getLink().get(0).getUrlElement().getValueAsString());
-		assertEquals("https://example.com/base/MedicationPrescription?patient=347&_include=MedicationPrescription.medication", parsed.getLink().get(1).getUrlElement().getValueAsString());
-
-		assertEquals(2, parsed.getEntry().size());
-		assertEquals("alternate", parsed.getEntry().get(0).getLink().get(0).getRelation());
-		assertEquals("http://example.com/base/MedicationPrescription/3123/_history/1", parsed.getEntry().get(0).getLink().get(0).getUrl());
-		assertEquals("http://foo?search", parsed.getEntry().get(0).getTransaction().getUrlElement().getValueAsString());
-
-		MedicationPrescription p = (MedicationPrescription) parsed.getEntry().get(0).getResource();
-		assertEquals("Patient/347", p.getPatient().getReference().getValue());
-		assertEquals("2014-08-16T05:31:17Z", ResourceMetadataKeyEnum.UPDATED.get(p).getValueAsString());
-		assertEquals("http://example.com/base/MedicationPrescription/3123/_history/1", p.getId().getValue());
-//		assertEquals("3123", p.getId().getValue());
-
-		Medication m = (Medication) parsed.getEntry().get(1).getResource();
-		assertEquals("http://example.com/base/Medication/example", m.getId().getValue());
-		assertSame(p.getMedication().getResource(), m);
-
-		String reencoded = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(parsed);
-		ourLog.info(reencoded);
-
-		Diff d = new Diff(new StringReader(content), new StringReader(reencoded));
-		assertTrue(d.toString(), d.identical());
+	public void testParseBundleNewWithPlaceholderIdsInBase2() {
+		//@formatter:off
+		String input = "<Bundle xmlns=\"http://hl7.org/fhir\">\n" + 
+				"    <id value=\"ringholm1430996763590912\"/>\n" + 
+				"    <base value=\"urn:uuid:\"/>\n" +
+				"    <entry>\n" +
+				"        <resource>\n" + 
+				"            <Provenance>\n" + 
+				"                <id value=\"0.1.2.3\"/>\n" + 
+				"            </Provenance>\n" + 
+				"        </resource>\n" + 
+				"    </entry>\n" + 
+				"</Bundle>\n";
+		//@formatter:on		
+		
+		ca.uhn.fhir.model.dstu2.resource.Bundle parsed = ourCtx.newXmlParser().parseResource(ca.uhn.fhir.model.dstu2.resource.Bundle.class, input);
+		assertEquals("urn:uuid:0.1.2.3", parsed.getEntry().get(0).getResource().getId().getValue());
+		
+		//@formatter:off
+		input = "<Bundle xmlns=\"http://hl7.org/fhir\">\n" + 
+				"    <id value=\"ringholm1430996763590912\"/>\n" + 
+				"    <base value=\"urn:uuid\"/>\n" +
+				"    <entry>\n" +
+				"        <resource>\n" + 
+				"            <Provenance>\n" + 
+				"                <id value=\"0.1.2.3\"/>\n" + 
+				"            </Provenance>\n" + 
+				"        </resource>\n" + 
+				"    </entry>\n" + 
+				"</Bundle>\n";
+		//@formatter:on		
+		
+		parsed = ourCtx.newXmlParser().parseResource(ca.uhn.fhir.model.dstu2.resource.Bundle.class, input);
+		assertEquals("urn:uuid:0.1.2.3", parsed.getEntry().get(0).getResource().getId().getValue());
 
 	}
 
-	
-	@Test
-	public void testEncodeAndParseBundleWithoutResourceIds() {
-		Organization org = new Organization();
-		org.addIdentifier().setSystem("urn:system").setValue("someval");
-		
-		Bundle bundle = Bundle.withSingleResource(org);
-		String str = ourCtx.newXmlParser().encodeBundleToString(bundle);
-		ourLog.info(str);
-		
-		Bundle parsed = ourCtx.newXmlParser().parseBundle(str);
-		assertThat(parsed.getEntries().get(0).getResource().getId().getValue(), emptyOrNullString());
-		assertTrue(parsed.getEntries().get(0).getResource().getId().isEmpty());
-	}
-	
 	@Test
-	public void testBundleWithBinary() {
+	public void testParseBundleOldStyleWithUnknownLinks() throws Exception {
 		//@formatter:off
 		String bundle = "<Bundle xmlns=\"http://hl7.org/fhir\">\n" + 
-			"   <meta/>\n" + 
-			"   <base value=\"http://localhost:52788\"/>\n" + 
+			"   <base value=\"http://foo/fhirBase1\"/>\n" + 
 			"   <total value=\"1\"/>\n" + 
 			"   <link>\n" + 
-			"      <relation value=\"self\"/>\n" + 
+			"      <relation value=\"foo\"/>\n" + 
 			"      <url value=\"http://localhost:52788/Binary?_pretty=true\"/>\n" + 
 			"   </link>\n" + 
 			"   <entry>\n" + 
+			"   <link>\n" + 
+			"      <relation value=\"bar\"/>\n" + 
+			"      <url value=\"http://localhost:52788/Binary?_pretty=true\"/>\n" + 
+			"   </link>\n" + 
 			"      <resource>\n" + 
-			"         <Binary xmlns=\"http://hl7.org/fhir\">\n" + 
+			"         <Patient xmlns=\"http://hl7.org/fhir\">\n" + 
 			"            <id value=\"1\"/>\n" + 
-			"            <meta/>\n" + 
-			"            <contentType value=\"text/plain\"/>\n" + 
-			"            <content value=\"AQIDBA==\"/>\n" + 
-			"         </Binary>\n" + 
+			"            <meta>\n" +
+			"               <versionId value=\"2\"/>\n" +
+			"               <lastUpdated value=\"2001-02-22T11:22:33-05:00\"/>\n" +
+			"            </meta>\n" + 
+			"            <birthDate value=\"2012-01-02\"/>\n" + 
+			"         </Patient>\n" + 
 			"      </resource>\n" + 
 			"   </entry>\n" + 
 			"</Bundle>";
 		//@formatter:on
 		
-		Bundle b = ourCtx.newXmlParser().parseBundle(bundle);
-		assertEquals(1, b.getEntries().size());
+		Bundle b = ourCtx.newXmlParser().parseBundle(bundle);
+		assertEquals(1, b.getEntries().size());
+		
+
+	}
+
+	@Test
+	public void testParseBundleOldWithPlaceholderIds() {
+		//@formatter:off
+		String input = "<Bundle xmlns=\"http://hl7.org/fhir\">\n" + 
+				"    <id value=\"ringholm1430996763590912\"/>\n" + 
+				"    <entry>\n" +
+				"        <base value=\"urn:oid:\"/>\n" +
+				"        <resource>\n" + 
+				"            <Provenance>\n" + 
+				"                <id value=\"0.1.2.3\"/>\n" + 
+				"            </Provenance>\n" + 
+				"        </resource>\n" + 
+				"    </entry>\n" + 
+				"</Bundle>\n";
+		//@formatter:on		
+		
+		Bundle parsed = ourCtx.newXmlParser().parseBundle(input);
+		assertEquals("urn:oid:0.1.2.3", parsed.getEntries().get(0).getResource().getId().getValue());
+		
+		//@formatter:off
+		input = "<Bundle xmlns=\"http://hl7.org/fhir\">\n" + 
+				"    <id value=\"ringholm1430996763590912\"/>\n" + 
+				"    <entry>\n" +
+				"        <base value=\"urn:oid\"/>\n" + // no trailing :, invalid but we'll be nice
+				"        <resource>\n" + 
+				"            <Provenance>\n" + 
+				"                <id value=\"0.1.2.3\"/>\n" + 
+				"            </Provenance>\n" + 
+				"        </resource>\n" + 
+				"    </entry>\n" + 
+				"</Bundle>\n";
+		//@formatter:on		
+		
+		parsed = ourCtx.newXmlParser().parseBundle(input);
+		assertEquals("urn:oid:0.1.2.3", parsed.getEntries().get(0).getResource().getId().getValue());
+
+	}
+
+	
+	@Test
+	public void testParseBundleWithBinary() {
+		// TODO: implement this test, make sure we handle ID and meta correctly in Binary
+	}
+	
+	/**
+	 * see #144 and #146
+	 */
+	@Test
+	public void testParseContained() {
+
+		FhirContext c = FhirContext.forDstu2();
+		IParser parser = c.newXmlParser().setPrettyPrint(true);
+
+		Observation o = new Observation();
+		o.getCode().setText("obs text");
+
+		Patient p = new Patient();
+		p.addName().addFamily("patient family");
+		o.getSubject().setResource(p);
+		
+		String enc = parser.encodeResourceToString(o);
+		ourLog.info(enc);
 		
-		Binary bin = (Binary) b.getEntries().get(0).getResource();
-		assertArrayEquals(new byte[] {1,2,3,4}, bin.getContent());
+		//@formatter:off
+		assertThat(enc, stringContainsInOrder(
+			"<Observation xmlns=\"http://hl7.org/fhir\">",
+			"<contained>",
+			"<Patient xmlns=\"http://hl7.org/fhir\">",
+			"<id value=\"1\"/>",
+			"</contained>",
+			"<reference value=\"#1\"/>"
+			));
+		//@formatter:on
 		
+		o = parser.parseResource(Observation.class, enc);
+		assertEquals("obs text", o.getCode().getText());
+		
+		assertNotNull(o.getSubject().getResource());
+		p = (Patient) o.getSubject().getResource();
+		assertEquals("patient family", p.getNameFirstRep().getFamilyAsSingleString());
 	}
 	
 
+	/**
+	 * Thanks to Alexander Kley!
+	 */
+	@Test
+	public void testParseContainedBinaryResource() {
+		byte[] bin = new byte[] { 0, 1, 2, 3, 4 };
+		final Binary binary = new Binary();
+		binary.setContentType("PatientConsent").setContent(bin);
+		// binary.setId(UUID.randomUUID().toString());
+
+		ca.uhn.fhir.model.dstu2.resource.DocumentManifest manifest = new ca.uhn.fhir.model.dstu2.resource.DocumentManifest();
+		// manifest.setId(UUID.randomUUID().toString());
+		CodeableConceptDt cc = new CodeableConceptDt();
+		cc.addCoding().setSystem("mySystem").setCode("PatientDocument");
+		manifest.setType(cc);
+		manifest.setMasterIdentifier(new IdentifierDt().setSystem("mySystem").setValue(UUID.randomUUID().toString()));
+		manifest.addContent().setP(new ResourceReferenceDt(binary));
+		manifest.setStatus(DocumentReferenceStatusEnum.CURRENT);
+
+		String encoded = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(manifest);
+		ourLog.info(encoded);
+		assertThat(encoded, StringContainsInOrder.stringContainsInOrder(Arrays.asList("contained>", "<Binary", "</contained>")));
+
+		ca.uhn.fhir.model.dstu2.resource.DocumentManifest actual = ourCtx.newXmlParser().parseResource(ca.uhn.fhir.model.dstu2.resource.DocumentManifest.class, encoded);
+		assertEquals(1, actual.getContained().getContainedResources().size());
+		assertEquals(1, actual.getContent().size());
+		assertNotNull(((ResourceReferenceDt)actual.getContent().get(0).getP()).getResource());
+
+	}
+
 	@Test
 	public void testParseMetadata() throws Exception {
 		//@formatter:off
@@ -1219,175 +1471,57 @@ public class XmlParserDstu2Test {
 	}
 
 	@Test
-	public void testParseBundleOldStyleWithUnknownLinks() throws Exception {
+	public void testParseNarrative() throws Exception {
 		//@formatter:off
-		String bundle = "<Bundle xmlns=\"http://hl7.org/fhir\">\n" + 
-			"   <base value=\"http://foo/fhirBase1\"/>\n" + 
-			"   <total value=\"1\"/>\n" + 
-			"   <link>\n" + 
-			"      <relation value=\"foo\"/>\n" + 
-			"      <url value=\"http://localhost:52788/Binary?_pretty=true\"/>\n" + 
-			"   </link>\n" + 
-			"   <entry>\n" + 
-			"   <link>\n" + 
-			"      <relation value=\"bar\"/>\n" + 
-			"      <url value=\"http://localhost:52788/Binary?_pretty=true\"/>\n" + 
-			"   </link>\n" + 
-			"      <resource>\n" + 
-			"         <Patient xmlns=\"http://hl7.org/fhir\">\n" + 
-			"            <id value=\"1\"/>\n" + 
-			"            <meta>\n" +
-			"               <versionId value=\"2\"/>\n" +
-			"               <lastUpdated value=\"2001-02-22T11:22:33-05:00\"/>\n" +
-			"            </meta>\n" + 
-			"            <birthDate value=\"2012-01-02\"/>\n" + 
-			"         </Patient>\n" + 
-			"      </resource>\n" + 
-			"   </entry>\n" + 
-			"</Bundle>";
+		String htmlNoNs = "<div>AAA<b>BBB</b>CCC</div>";
+		String htmlNs = htmlNoNs.replace("<div>", "<div xmlns=\"http://www.w3.org/1999/xhtml\">"); 
+		String res= "<Patient xmlns=\"http://hl7.org/fhir\">\n" + 
+				"   <id value=\"1333\"/>\n" + 
+				"   <text>\n" + 
+				"      " + htmlNs + "\n" +
+				"   </text>\n" + 
+				"</Patient>";
 		//@formatter:on
 		
-		Bundle b = ourCtx.newXmlParser().parseBundle(bundle);
-		assertEquals(1, b.getEntries().size());
-		
-
-	}
-
-	/**
-	 * See #103
-	 */
-	@Test
-	public void testEncodeAndReEncodeContainedXml() {
-		Composition comp = new Composition();
-		comp.addSection().getContent().setResource(new AllergyIntolerance().setComment("Section0_Allergy0"));
-		comp.addSection().getContent().setResource(new AllergyIntolerance().setComment("Section1_Allergy0"));
-		comp.addSection().getContent().setResource(new AllergyIntolerance().setComment("Section2_Allergy0"));
-		
-		IParser parser = ourCtx.newXmlParser().setPrettyPrint(true);
-		
-		String string = parser.encodeResourceToString(comp);
-		ourLog.info(string);
-
-		Composition parsed = parser.parseResource(Composition.class, string);
-		parsed.getSection().remove(0);
-
-		string = parser.encodeResourceToString(parsed);
-		ourLog.info(string);
-
-		parsed = parser.parseResource(Composition.class, string);
-		assertEquals(2, parsed.getContained().getContainedResources().size());
+		Patient p = ourCtx.newXmlParser().parseResource(Patient.class, res);
+		assertEquals(htmlNs, p.getText().getDiv().getValueAsString());
 	}
 	
 	/**
-	 * See #103
+	 * See #163
 	 */
 	@Test
-	public void testEncodeAndReEncodeContainedJson() {
-		Composition comp = new Composition();
-		comp.addSection().getContent().setResource(new AllergyIntolerance().setComment("Section0_Allergy0"));
-		comp.addSection().getContent().setResource(new AllergyIntolerance().setComment("Section1_Allergy0"));
-		comp.addSection().getContent().setResource(new AllergyIntolerance().setComment("Section2_Allergy0"));
-		
-		IParser parser = ourCtx.newJsonParser().setPrettyPrint(true);
-		
-		String string = parser.encodeResourceToString(comp);
-		ourLog.info(string);
-
-		Composition parsed = parser.parseResource(Composition.class, string);
-		parsed.getSection().remove(0);
-
-		string = parser.encodeResourceToString(parsed);
-		ourLog.info(string);
-
-		parsed = parser.parseResource(Composition.class, string);
-		assertEquals(2, parsed.getContained().getContainedResources().size());
-	}
-
-	@Test
-	public void testEncodeAndParseExtensions() throws Exception {
+	public void testParseResourceType() {
+		IParser xmlParser = ourCtx.newXmlParser().setPrettyPrint(true);
 
+		// Patient
 		Patient patient = new Patient();
-		patient.addIdentifier().setUse(IdentifierUseEnum.OFFICIAL).setSystem("urn:example").setValue("7000135");
-
-		ExtensionDt ext = new ExtensionDt();
-		ext.setUrl("http://example.com/extensions#someext");
-		ext.setValue(new DateTimeDt("2011-01-02T11:13:15"));
-		patient.addUndeclaredExtension(ext);
-
-		ExtensionDt parent = new ExtensionDt().setUrl("http://example.com#parent");
-		patient.addUndeclaredExtension(parent);
-		ExtensionDt child1 = new ExtensionDt().setUrl("http://example.com#child").setValue(new StringDt("value1"));
-		parent.addUndeclaredExtension(child1);
-		ExtensionDt child2 = new ExtensionDt().setUrl("http://example.com#child").setValue(new StringDt("value2"));
-		parent.addUndeclaredExtension(child2);
-
-		ExtensionDt modExt = new ExtensionDt();
-		modExt.setUrl("http://example.com/extensions#modext");
-		modExt.setValue(new DateDt("1995-01-02"));
-		modExt.setModifier(true);
-		patient.addUndeclaredExtension(modExt);
-
-		HumanNameDt name = patient.addName();
-		name.addFamily("Blah");
-		StringDt given = name.addGiven();
-		given.setValue("Joe");
-		ExtensionDt ext2 = new ExtensionDt().setUrl("http://examples.com#givenext").setValue(new StringDt("given"));
-		given.addUndeclaredExtension(ext2);
-
-		StringDt given2 = name.addGiven();
-		given2.setValue("Shmoe");
-		ExtensionDt given2ext = new ExtensionDt().setUrl("http://examples.com#givenext_parent");
-		given2.addUndeclaredExtension(given2ext);
-		given2ext.addUndeclaredExtension(new ExtensionDt().setUrl("http://examples.com#givenext_child").setValue(new StringDt("CHILD")));
+		String patientId = UUID.randomUUID().toString();
+		patient.setId(new IdDt("Patient", patientId));
+		patient.addName().addGiven("John").addFamily("Smith");
+		patient.setGender(AdministrativeGenderEnum.MALE);
+		patient.setBirthDate(new DateDt("1987-04-16"));
 
-		String output = ourCtx.newXmlParser().setPrettyPrint(true).encodeResourceToString(patient);
-		ourLog.info(output);
+		// Bundle
+		ca.uhn.fhir.model.dstu2.resource.Bundle bundle = new ca.uhn.fhir.model.dstu2.resource.Bundle();
+		bundle.setType(BundleTypeEnum.COLLECTION);
+		bundle.addEntry().setResource(patient);
 
-		String enc = ourCtx.newXmlParser().encodeResourceToString(patient);
-		assertThat(enc, containsString("<Patient xmlns=\"http://hl7.org/fhir\"><extension url=\"http://example.com/extensions#someext\"><valueDateTime value=\"2011-01-02T11:13:15\"/></extension>"));
-		assertThat(enc, containsString("<modifierExtension url=\"http://example.com/extensions#modext\"><valueDate value=\"1995-01-02\"/></modifierExtension>"));
-		assertThat(
-				enc,
-				containsString("<extension url=\"http://example.com#parent\"><extension url=\"http://example.com#child\"><valueString value=\"value1\"/></extension><extension url=\"http://example.com#child\"><valueString value=\"value2\"/></extension></extension>"));
-		assertThat(enc, containsString("<given value=\"Joe\"><extension url=\"http://examples.com#givenext\"><valueString value=\"given\"/></extension></given>"));
-		assertThat(enc, containsString("<given value=\"Shmoe\"><extension url=\"http://examples.com#givenext_parent\"><extension url=\"http://examples.com#givenext_child\"><valueString value=\"CHILD\"/></extension></extension></given>"));
+		String bundleText = xmlParser.encodeResourceToString(bundle);
+		ourLog.info(bundleText);
 		
-		/*
-		 * Now parse this back
-		 */
-
-		Patient parsed = ourCtx.newXmlParser().parseResource(Patient.class, enc);
-		ext = parsed.getUndeclaredExtensions().get(0);
-		assertEquals("http://example.com/extensions#someext", ext.getUrl());
-		assertEquals("2011-01-02T11:13:15", ((DateTimeDt) ext.getValue()).getValueAsString());
-
-		parent = patient.getUndeclaredExtensions().get(1);
-		assertEquals("http://example.com#parent", parent.getUrl());
-		assertNull(parent.getValue());
-		child1 = parent.getExtension().get(0);
-		assertEquals("http://example.com#child", child1.getUrl());
-		assertEquals("value1", ((StringDt) child1.getValue()).getValueAsString());
-		child2 = parent.getExtension().get(1);
-		assertEquals("http://example.com#child", child2.getUrl());
-		assertEquals("value2", ((StringDt) child2.getValue()).getValueAsString());
-
-		modExt = parsed.getUndeclaredModifierExtensions().get(0);
-		assertEquals("http://example.com/extensions#modext", modExt.getUrl());
-		assertEquals("1995-01-02", ((DateDt) modExt.getValue()).getValueAsString());
-
-		name = parsed.getName().get(0);
-
-		ext2 = name.getGiven().get(0).getUndeclaredExtensions().get(0);
-		assertEquals("http://examples.com#givenext", ext2.getUrl());
-		assertEquals("given", ((StringDt) ext2.getValue()).getValueAsString());
-
-		given2ext = name.getGiven().get(1).getUndeclaredExtensions().get(0);
-		assertEquals("http://examples.com#givenext_parent", given2ext.getUrl());
-		assertNull(given2ext.getValue());
-		ExtensionDt given2ext2 = given2ext.getExtension().get(0);
-		assertEquals("http://examples.com#givenext_child", given2ext2.getUrl());
-		assertEquals("CHILD", ((StringDt) given2ext2.getValue()).getValue());
+		ca.uhn.fhir.model.dstu2.resource.Bundle reincarnatedBundle = xmlParser.parseResource (ca.uhn.fhir.model.dstu2.resource.Bundle.class, bundleText);
+		Patient reincarnatedPatient = reincarnatedBundle.getAllPopulatedChildElementsOfType(Patient.class).get(0); 
+		
+		assertEquals("Patient", patient.getId().getResourceType());
+		assertEquals("Patient", reincarnatedPatient.getId().getResourceType());
+	}
 
+	@BeforeClass
+	public static void beforeClass() {
+		XMLUnit.setIgnoreAttributeOrder(true);
+		XMLUnit.setIgnoreComments(true);
+		XMLUnit.setIgnoreWhitespace(true);
 	}
 
 	
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 2fd3770..7c4655d 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -73,6 +73,22 @@
 				Some HTML entities were not correctly converted during parsing. Thanks to
 				Nick Kitto for reporting!
 			</action>
+			<action type="fix">
+				In the JPA Server:
+				Transactions creating resources with temporary/placeholder resource IDs
+				and other resources with references to those placeholder IDs previously
+				did not work if the reference did not contain the resource type
+				(e.g. Patient/urn:oid:0.1.2.3 instead of urn:oid:0.1.2.3). The
+				latter is actually the correct way of specifying a reference to a
+				placeholder, but the former was the only way that worked. Both forms
+				now work, in order to be lenient. Thanks to Bill De Beaubien for
+				reporting!
+			</action>
+			<action type="fix">
+				When parsing Bundles, if Bundle.entry.base is set to "cid:" (for DSTU1) 
+				or "urn:uuid:" / "urn:oid:" (for DSTU2) this is now correctly passed as
+				the base in resource.getId()
+			</action>
 		</release>
 		<release version="1.0" date="2015-May-8">
 			<action type="add">
